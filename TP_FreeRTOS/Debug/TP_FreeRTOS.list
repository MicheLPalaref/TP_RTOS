
TP_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005884  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005a54  08005a54  00015a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ad0  08005ad0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ad0  08005ad0  00015ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ad8  08005ad8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ad8  08005ad8  00015ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005adc  08005adc  00015adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041f4  2000006c  08005b4c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004260  08005b4c  00024260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001456e  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003161  00000000  00000000  0003464d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  000377b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e38  00000000  00000000  00038a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002944a  00000000  00000000  00039850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f45  00000000  00000000  00062c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fbf20  00000000  00000000  00079bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051b4  00000000  00000000  00175b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0017acb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a3c 	.word	0x08005a3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08005a3c 	.word	0x08005a3c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000008c 	.word	0x2000008c
 800053c:	200000e0 	.word	0x200000e0

08000540 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <MX_FREERTOS_Init+0x30>)
 8000548:	1d3c      	adds	r4, r7, #4
 800054a:	461d      	mov	r5, r3
 800054c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000550:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000554:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f003 fb9f 	bl	8003ca0 <osThreadCreate>
 8000562:	4603      	mov	r3, r0
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <MX_FREERTOS_Init+0x34>)
 8000566:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bdb0      	pop	{r4, r5, r7, pc}
 8000570:	08005a60 	.word	0x08005a60
 8000574:	20000088 	.word	0x20000088

08000578 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000580:	2001      	movs	r0, #1
 8000582:	f003 fbd9 	bl	8003d38 <osDelay>
 8000586:	e7fb      	b.n	8000580 <StartDefaultTask+0x8>

08000588 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b090      	sub	sp, #64	; 0x40
 800058c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800059e:	4bad      	ldr	r3, [pc, #692]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4aac      	ldr	r2, [pc, #688]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005a4:	f043 0310 	orr.w	r3, r3, #16
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4baa      	ldr	r3, [pc, #680]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0310 	and.w	r3, r3, #16
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80005b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005b6:	4ba7      	ldr	r3, [pc, #668]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4aa6      	ldr	r2, [pc, #664]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4ba4      	ldr	r3, [pc, #656]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
 80005cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4ba1      	ldr	r3, [pc, #644]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4aa0      	ldr	r2, [pc, #640]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b9e      	ldr	r3, [pc, #632]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	623b      	str	r3, [r7, #32]
 80005e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e6:	4b9b      	ldr	r3, [pc, #620]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a9a      	ldr	r2, [pc, #616]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b98      	ldr	r3, [pc, #608]	; (8000854 <MX_GPIO_Init+0x2cc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	61fb      	str	r3, [r7, #28]
 80005fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b95      	ldr	r3, [pc, #596]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a94      	ldr	r2, [pc, #592]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b92      	ldr	r3, [pc, #584]	; (8000854 <MX_GPIO_Init+0x2cc>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	61bb      	str	r3, [r7, #24]
 8000614:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b8f      	ldr	r3, [pc, #572]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a8e      	ldr	r2, [pc, #568]	; (8000854 <MX_GPIO_Init+0x2cc>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b8c      	ldr	r3, [pc, #560]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800062e:	4b89      	ldr	r3, [pc, #548]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a88      	ldr	r2, [pc, #544]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000634:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b86      	ldr	r3, [pc, #536]	; (8000854 <MX_GPIO_Init+0x2cc>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000646:	4b83      	ldr	r3, [pc, #524]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a82      	ldr	r2, [pc, #520]	; (8000854 <MX_GPIO_Init+0x2cc>)
 800064c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b80      	ldr	r3, [pc, #512]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800065e:	4b7d      	ldr	r3, [pc, #500]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a7c      	ldr	r2, [pc, #496]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b7a      	ldr	r3, [pc, #488]	; (8000854 <MX_GPIO_Init+0x2cc>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000676:	4b77      	ldr	r3, [pc, #476]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a76      	ldr	r2, [pc, #472]	; (8000854 <MX_GPIO_Init+0x2cc>)
 800067c:	f043 0320 	orr.w	r3, r3, #32
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b74      	ldr	r3, [pc, #464]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0320 	and.w	r3, r3, #32
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	4b71      	ldr	r3, [pc, #452]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a70      	ldr	r2, [pc, #448]	; (8000854 <MX_GPIO_Init+0x2cc>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b6e      	ldr	r3, [pc, #440]	; (8000854 <MX_GPIO_Init+0x2cc>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2120      	movs	r1, #32
 80006aa:	486b      	ldr	r0, [pc, #428]	; (8000858 <MX_GPIO_Init+0x2d0>)
 80006ac:	f001 f9f4 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f241 010e 	movw	r1, #4110	; 0x100e
 80006b6:	4869      	ldr	r0, [pc, #420]	; (800085c <MX_GPIO_Init+0x2d4>)
 80006b8:	f001 f9ee 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2108      	movs	r1, #8
 80006c0:	4867      	ldr	r0, [pc, #412]	; (8000860 <MX_GPIO_Init+0x2d8>)
 80006c2:	f001 f9e9 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006cc:	4865      	ldr	r0, [pc, #404]	; (8000864 <MX_GPIO_Init+0x2dc>)
 80006ce:	f001 f9e3 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	21c8      	movs	r1, #200	; 0xc8
 80006d6:	4864      	ldr	r0, [pc, #400]	; (8000868 <MX_GPIO_Init+0x2e0>)
 80006d8:	f001 f9de 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80006dc:	2310      	movs	r3, #16
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80006ec:	230e      	movs	r3, #14
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006f4:	4619      	mov	r1, r3
 80006f6:	485d      	ldr	r0, [pc, #372]	; (800086c <MX_GPIO_Init+0x2e4>)
 80006f8:	f001 f822 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80006fc:	2308      	movs	r3, #8
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000700:	2300      	movs	r3, #0
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800070c:	4619      	mov	r1, r3
 800070e:	4857      	ldr	r0, [pc, #348]	; (800086c <MX_GPIO_Init+0x2e4>)
 8000710:	f001 f816 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000714:	2304      	movs	r3, #4
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000724:	2309      	movs	r3, #9
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800072c:	4619      	mov	r1, r3
 800072e:	484f      	ldr	r0, [pc, #316]	; (800086c <MX_GPIO_Init+0x2e4>)
 8000730:	f001 f806 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000734:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	2302      	movs	r3, #2
 800073c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000742:	2303      	movs	r3, #3
 8000744:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000746:	230b      	movs	r3, #11
 8000748:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800074a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800074e:	4619      	mov	r1, r3
 8000750:	4845      	ldr	r0, [pc, #276]	; (8000868 <MX_GPIO_Init+0x2e0>)
 8000752:	f000 fff5 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000756:	f64f 7383 	movw	r3, #65411	; 0xff83
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000768:	230c      	movs	r3, #12
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800076c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000770:	4619      	mov	r1, r3
 8000772:	483e      	ldr	r0, [pc, #248]	; (800086c <MX_GPIO_Init+0x2e4>)
 8000774:	f000 ffe4 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000778:	f44f 7340 	mov.w	r3, #768	; 0x300
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800077e:	2312      	movs	r3, #18
 8000780:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800078a:	2304      	movs	r3, #4
 800078c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000792:	4619      	mov	r1, r3
 8000794:	4836      	ldr	r0, [pc, #216]	; (8000870 <MX_GPIO_Init+0x2e8>)
 8000796:	f000 ffd3 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800079a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80007ac:	230a      	movs	r3, #10
 80007ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b4:	4619      	mov	r1, r3
 80007b6:	482e      	ldr	r0, [pc, #184]	; (8000870 <MX_GPIO_Init+0x2e8>)
 80007b8:	f000 ffc2 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80007bc:	2310      	movs	r3, #16
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80007cc:	2302      	movs	r3, #2
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d4:	4619      	mov	r1, r3
 80007d6:	4826      	ldr	r0, [pc, #152]	; (8000870 <MX_GPIO_Init+0x2e8>)
 80007d8:	f000 ffb2 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80007ec:	2308      	movs	r3, #8
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f4:	4619      	mov	r1, r3
 80007f6:	4818      	ldr	r0, [pc, #96]	; (8000858 <MX_GPIO_Init+0x2d0>)
 80007f8:	f000 ffa2 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80007fc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800080e:	230c      	movs	r3, #12
 8000810:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000816:	4619      	mov	r1, r3
 8000818:	4816      	ldr	r0, [pc, #88]	; (8000874 <MX_GPIO_Init+0x2ec>)
 800081a:	f000 ff91 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800081e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000830:	2301      	movs	r3, #1
 8000832:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000838:	4619      	mov	r1, r3
 800083a:	480f      	ldr	r0, [pc, #60]	; (8000878 <MX_GPIO_Init+0x2f0>)
 800083c:	f000 ff80 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000840:	2360      	movs	r3, #96	; 0x60
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000850:	230d      	movs	r3, #13
 8000852:	e013      	b.n	800087c <MX_GPIO_Init+0x2f4>
 8000854:	40023800 	.word	0x40023800
 8000858:	40020c00 	.word	0x40020c00
 800085c:	40022000 	.word	0x40022000
 8000860:	40022800 	.word	0x40022800
 8000864:	40021c00 	.word	0x40021c00
 8000868:	40021800 	.word	0x40021800
 800086c:	40021000 	.word	0x40021000
 8000870:	40020400 	.word	0x40020400
 8000874:	40020800 	.word	0x40020800
 8000878:	40020000 	.word	0x40020000
 800087c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800087e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000882:	4619      	mov	r1, r3
 8000884:	48bc      	ldr	r0, [pc, #752]	; (8000b78 <MX_GPIO_Init+0x5f0>)
 8000886:	f000 ff5b 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800088a:	2340      	movs	r3, #64	; 0x40
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800089a:	230a      	movs	r3, #10
 800089c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a2:	4619      	mov	r1, r3
 80008a4:	48b5      	ldr	r0, [pc, #724]	; (8000b7c <MX_GPIO_Init+0x5f4>)
 80008a6:	f000 ff4b 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80008aa:	f248 1333 	movw	r3, #33075	; 0x8133
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008bc:	230c      	movs	r3, #12
 80008be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008c4:	4619      	mov	r1, r3
 80008c6:	48ae      	ldr	r0, [pc, #696]	; (8000b80 <MX_GPIO_Init+0x5f8>)
 80008c8:	f000 ff3a 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80008cc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008de:	230e      	movs	r3, #14
 80008e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80008e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e6:	4619      	mov	r1, r3
 80008e8:	48a6      	ldr	r0, [pc, #664]	; (8000b84 <MX_GPIO_Init+0x5fc>)
 80008ea:	f000 ff29 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80008ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	2300      	movs	r3, #0
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000900:	4619      	mov	r1, r3
 8000902:	48a0      	ldr	r0, [pc, #640]	; (8000b84 <MX_GPIO_Init+0x5fc>)
 8000904:	f000 ff1c 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000908:	2340      	movs	r3, #64	; 0x40
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800090c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800091a:	4619      	mov	r1, r3
 800091c:	489a      	ldr	r0, [pc, #616]	; (8000b88 <MX_GPIO_Init+0x600>)
 800091e:	f000 ff0f 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000922:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000934:	230c      	movs	r3, #12
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800093c:	4619      	mov	r1, r3
 800093e:	4892      	ldr	r0, [pc, #584]	; (8000b88 <MX_GPIO_Init+0x600>)
 8000940:	f000 fefe 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000944:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000956:	230a      	movs	r3, #10
 8000958:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800095e:	4619      	mov	r1, r3
 8000960:	488a      	ldr	r0, [pc, #552]	; (8000b8c <MX_GPIO_Init+0x604>)
 8000962:	f000 feed 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000966:	23f0      	movs	r3, #240	; 0xf0
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000976:	230a      	movs	r3, #10
 8000978:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800097a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800097e:	4619      	mov	r1, r3
 8000980:	4883      	ldr	r0, [pc, #524]	; (8000b90 <MX_GPIO_Init+0x608>)
 8000982:	f000 fedd 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000986:	23f7      	movs	r3, #247	; 0xf7
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000996:	230e      	movs	r3, #14
 8000998:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800099a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099e:	4619      	mov	r1, r3
 80009a0:	487c      	ldr	r0, [pc, #496]	; (8000b94 <MX_GPIO_Init+0x60c>)
 80009a2:	f000 fecd 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80009a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80009b8:	2309      	movs	r3, #9
 80009ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c0:	4619      	mov	r1, r3
 80009c2:	486f      	ldr	r0, [pc, #444]	; (8000b80 <MX_GPIO_Init+0x5f8>)
 80009c4:	f000 febc 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80009c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80009da:	230a      	movs	r3, #10
 80009dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e2:	4619      	mov	r1, r3
 80009e4:	4866      	ldr	r0, [pc, #408]	; (8000b80 <MX_GPIO_Init+0x5f8>)
 80009e6:	f000 feab 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009ea:	2320      	movs	r3, #32
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009fe:	4619      	mov	r1, r3
 8000a00:	4861      	ldr	r0, [pc, #388]	; (8000b88 <MX_GPIO_Init+0x600>)
 8000a02:	f000 fe9d 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000a06:	2308      	movs	r3, #8
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a16:	230d      	movs	r3, #13
 8000a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4859      	ldr	r0, [pc, #356]	; (8000b88 <MX_GPIO_Init+0x600>)
 8000a22:	f000 fe8d 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 8000a26:	f241 030e 	movw	r3, #4110	; 0x100e
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4854      	ldr	r0, [pc, #336]	; (8000b90 <MX_GPIO_Init+0x608>)
 8000a40:	f000 fe7e 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a56:	4619      	mov	r1, r3
 8000a58:	484f      	ldr	r0, [pc, #316]	; (8000b98 <MX_GPIO_Init+0x610>)
 8000a5a:	f000 fe71 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a5e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a70:	230c      	movs	r3, #12
 8000a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4848      	ldr	r0, [pc, #288]	; (8000b9c <MX_GPIO_Init+0x614>)
 8000a7c:	f000 fe60 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000a80:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a92:	230e      	movs	r3, #14
 8000a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	483c      	ldr	r0, [pc, #240]	; (8000b90 <MX_GPIO_Init+0x608>)
 8000a9e:	f000 fe4f 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4836      	ldr	r0, [pc, #216]	; (8000b94 <MX_GPIO_Init+0x60c>)
 8000aba:	f000 fe41 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ad0:	230d      	movs	r3, #13
 8000ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4829      	ldr	r0, [pc, #164]	; (8000b80 <MX_GPIO_Init+0x5f8>)
 8000adc:	f000 fe30 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af0:	4619      	mov	r1, r3
 8000af2:	4825      	ldr	r0, [pc, #148]	; (8000b88 <MX_GPIO_Init+0x600>)
 8000af4:	f000 fe24 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000af8:	2304      	movs	r3, #4
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b08:	230c      	movs	r3, #12
 8000b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b10:	4619      	mov	r1, r3
 8000b12:	481d      	ldr	r0, [pc, #116]	; (8000b88 <MX_GPIO_Init+0x600>)
 8000b14:	f000 fe14 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000b18:	f248 0304 	movw	r3, #32772	; 0x8004
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	481c      	ldr	r0, [pc, #112]	; (8000ba0 <MX_GPIO_Init+0x618>)
 8000b2e:	f000 fe07 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000b32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4815      	ldr	r0, [pc, #84]	; (8000ba0 <MX_GPIO_Init+0x618>)
 8000b4c:	f000 fdf8 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000b50:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b62:	230d      	movs	r3, #13
 8000b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <MX_GPIO_Init+0x618>)
 8000b6e:	f000 fde7 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e016      	b.n	8000ba4 <MX_GPIO_Init+0x61c>
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	40021800 	.word	0x40021800
 8000b84:	40022400 	.word	0x40022400
 8000b88:	40020c00 	.word	0x40020c00
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40022000 	.word	0x40022000
 8000b94:	40022800 	.word	0x40022800
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	40021400 	.word	0x40021400
 8000ba0:	40021c00 	.word	0x40021c00
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bba:	4619      	mov	r1, r3
 8000bbc:	48a4      	ldr	r0, [pc, #656]	; (8000e50 <MX_GPIO_Init+0x8c8>)
 8000bbe:	f000 fdbf 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000bc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	489d      	ldr	r0, [pc, #628]	; (8000e50 <MX_GPIO_Init+0x8c8>)
 8000bda:	f000 fdb1 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4896      	ldr	r0, [pc, #600]	; (8000e54 <MX_GPIO_Init+0x8cc>)
 8000bfc:	f000 fda0 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c06:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c14:	4619      	mov	r1, r3
 8000c16:	488e      	ldr	r0, [pc, #568]	; (8000e50 <MX_GPIO_Init+0x8c8>)
 8000c18:	f000 fd92 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000c1c:	23c0      	movs	r3, #192	; 0xc0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c34:	4619      	mov	r1, r3
 8000c36:	4888      	ldr	r0, [pc, #544]	; (8000e58 <MX_GPIO_Init+0x8d0>)
 8000c38:	f000 fd82 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000c3c:	2310      	movs	r3, #16
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c4c:	230a      	movs	r3, #10
 8000c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c54:	4619      	mov	r1, r3
 8000c56:	4881      	ldr	r0, [pc, #516]	; (8000e5c <MX_GPIO_Init+0x8d4>)
 8000c58:	f000 fd72 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c5c:	2328      	movs	r3, #40	; 0x28
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c74:	4619      	mov	r1, r3
 8000c76:	4879      	ldr	r0, [pc, #484]	; (8000e5c <MX_GPIO_Init+0x8d4>)
 8000c78:	f000 fd62 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000c7c:	23c8      	movs	r3, #200	; 0xc8
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c90:	4619      	mov	r1, r3
 8000c92:	4873      	ldr	r0, [pc, #460]	; (8000e60 <MX_GPIO_Init+0x8d8>)
 8000c94:	f000 fd54 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000c98:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000caa:	4619      	mov	r1, r3
 8000cac:	486d      	ldr	r0, [pc, #436]	; (8000e64 <MX_GPIO_Init+0x8dc>)
 8000cae:	f000 fd47 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000cb2:	2308      	movs	r3, #8
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4862      	ldr	r0, [pc, #392]	; (8000e58 <MX_GPIO_Init+0x8d0>)
 8000cce:	f000 fd37 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ce2:	230a      	movs	r3, #10
 8000ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cea:	4619      	mov	r1, r3
 8000cec:	485a      	ldr	r0, [pc, #360]	; (8000e58 <MX_GPIO_Init+0x8d0>)
 8000cee:	f000 fd27 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cf2:	2332      	movs	r3, #50	; 0x32
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d02:	230b      	movs	r3, #11
 8000d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4852      	ldr	r0, [pc, #328]	; (8000e58 <MX_GPIO_Init+0x8d0>)
 8000d0e:	f000 fd17 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d12:	2304      	movs	r3, #4
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d22:	2309      	movs	r3, #9
 8000d24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	484e      	ldr	r0, [pc, #312]	; (8000e68 <MX_GPIO_Init+0x8e0>)
 8000d2e:	f000 fd07 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000d32:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d44:	2309      	movs	r3, #9
 8000d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4847      	ldr	r0, [pc, #284]	; (8000e6c <MX_GPIO_Init+0x8e4>)
 8000d50:	f000 fcf6 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000d54:	2304      	movs	r3, #4
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d64:	4619      	mov	r1, r3
 8000d66:	483e      	ldr	r0, [pc, #248]	; (8000e60 <MX_GPIO_Init+0x8d8>)
 8000d68:	f000 fcea 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d6c:	2386      	movs	r3, #134	; 0x86
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d7c:	230b      	movs	r3, #11
 8000d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d84:	4619      	mov	r1, r3
 8000d86:	4833      	ldr	r0, [pc, #204]	; (8000e54 <MX_GPIO_Init+0x8cc>)
 8000d88:	f000 fcda 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d90:	2303      	movs	r3, #3
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	482d      	ldr	r0, [pc, #180]	; (8000e54 <MX_GPIO_Init+0x8cc>)
 8000da0:	f000 fcce 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000da4:	2350      	movs	r3, #80	; 0x50
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000db4:	230d      	movs	r3, #13
 8000db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4825      	ldr	r0, [pc, #148]	; (8000e54 <MX_GPIO_Init+0x8cc>)
 8000dc0:	f000 fcbe 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000dc4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dca:	2312      	movs	r3, #18
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dde:	4619      	mov	r1, r3
 8000de0:	481e      	ldr	r0, [pc, #120]	; (8000e5c <MX_GPIO_Init+0x8d4>)
 8000de2:	f000 fcad 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000de6:	2328      	movs	r3, #40	; 0x28
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000df6:	230a      	movs	r3, #10
 8000df8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4814      	ldr	r0, [pc, #80]	; (8000e54 <MX_GPIO_Init+0x8cc>)
 8000e02:	f000 fc9d 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000e06:	2340      	movs	r3, #64	; 0x40
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000e16:	2309      	movs	r3, #9
 8000e18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480e      	ldr	r0, [pc, #56]	; (8000e5c <MX_GPIO_Init+0x8d4>)
 8000e22:	f000 fc8d 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000e26:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e38:	2305      	movs	r3, #5
 8000e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e40:	4619      	mov	r1, r3
 8000e42:	4809      	ldr	r0, [pc, #36]	; (8000e68 <MX_GPIO_Init+0x8e0>)
 8000e44:	f000 fc7c 	bl	8001740 <HAL_GPIO_Init>

}
 8000e48:	bf00      	nop
 8000e4a:	3740      	adds	r7, #64	; 0x40
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40022000 	.word	0x40022000
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40020800 	.word	0x40020800
 8000e5c:	40021c00 	.word	0x40021c00
 8000e60:	40021800 	.word	0x40021800
 8000e64:	40021400 	.word	0x40021400
 8000e68:	40020400 	.word	0x40020400
 8000e6c:	40020c00 	.word	0x40020c00

08000e70 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e78:	1d39      	adds	r1, r7, #4
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <__io_putchar+0x20>)
 8000e82:	f002 fa67 	bl	8003354 <HAL_UART_Transmit>
	return ch;
 8000e86:	687b      	ldr	r3, [r7, #4]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000033c 	.word	0x2000033c

08000e94 <task_blink_led>:

void task_blink_led(void * unused){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
		/* Simply toggle the LED every 100ms, blocking between each toggle. */
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <task_blink_led+0x20>)
 8000ea0:	f000 fe13 	bl	8001aca <HAL_GPIO_TogglePin>
		printf("LED Toggle\r\n");
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <task_blink_led+0x24>)
 8000ea6:	f004 fa33 	bl	8005310 <puts>
		//vToggleLED();
		vTaskDelay( 100 / portTICK_PERIOD_MS );
 8000eaa:	2064      	movs	r0, #100	; 0x64
 8000eac:	f003 f9a8 	bl	8004200 <vTaskDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000eb0:	e7f4      	b.n	8000e9c <task_blink_led+0x8>
 8000eb2:	bf00      	nop
 8000eb4:	40022000 	.word	0x40022000
 8000eb8:	08005a7c 	.word	0x08005a7c

08000ebc <taskGive>:
	}
}

void taskGive(void * unused){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <taskTake>:

void taskTake(void * unused){
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]


}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000eea:	f000 fb1a 	bl	8001522 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000eee:	f000 f83f 	bl	8000f70 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ef2:	f7ff fb49 	bl	8000588 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000ef6:	f000 fa39 	bl	800136c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	//début du code

	xTaskCreate(
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <main+0x68>)
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	2301      	movs	r3, #1
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2300      	movs	r3, #0
 8000f04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f08:	4911      	ldr	r1, [pc, #68]	; (8000f50 <main+0x6c>)
 8000f0a:	4812      	ldr	r0, [pc, #72]	; (8000f54 <main+0x70>)
 8000f0c:	f003 f83f 	bl	8003f8e <xTaskCreate>
			NULL,
			1,
			&handle_task_blink_led
	);

	xTaskCreate(
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <main+0x74>)
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	2303      	movs	r3, #3
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f1e:	490f      	ldr	r1, [pc, #60]	; (8000f5c <main+0x78>)
 8000f20:	480f      	ldr	r0, [pc, #60]	; (8000f60 <main+0x7c>)
 8000f22:	f003 f834 	bl	8003f8e <xTaskCreate>
			NULL,
			3,
			&handle_taskGive
	);

	xTaskCreate(
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <main+0x80>)
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f34:	490c      	ldr	r1, [pc, #48]	; (8000f68 <main+0x84>)
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <main+0x88>)
 8000f38:	f003 f829 	bl	8003f8e <xTaskCreate>
			2,
			&handle_taskTake
	);


	vTaskStartScheduler();	// Ne rien coder apres cette ligne!
 8000f3c:	f003 f996 	bl	800426c <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8000f40:	f7ff fafe 	bl	8000540 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000f44:	f002 fea5 	bl	8003c92 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000f48:	e7fe      	b.n	8000f48 <main+0x64>
 8000f4a:	bf00      	nop
 8000f4c:	200002e0 	.word	0x200002e0
 8000f50:	08005a88 	.word	0x08005a88
 8000f54:	08000e95 	.word	0x08000e95
 8000f58:	200002e4 	.word	0x200002e4
 8000f5c:	08005a8c 	.word	0x08005a8c
 8000f60:	08000ebd 	.word	0x08000ebd
 8000f64:	200002e8 	.word	0x200002e8
 8000f68:	08005aa4 	.word	0x08005aa4
 8000f6c:	08000ed1 	.word	0x08000ed1

08000f70 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b094      	sub	sp, #80	; 0x50
 8000f74:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f76:	f107 0320 	add.w	r3, r7, #32
 8000f7a:	2230      	movs	r2, #48	; 0x30
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f004 faa6 	bl	80054d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f94:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <SystemClock_Config+0xd4>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	4a2a      	ldr	r2, [pc, #168]	; (8001044 <SystemClock_Config+0xd4>)
 8000f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa0:	4b28      	ldr	r3, [pc, #160]	; (8001044 <SystemClock_Config+0xd4>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fac:	4b26      	ldr	r3, [pc, #152]	; (8001048 <SystemClock_Config+0xd8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a25      	ldr	r2, [pc, #148]	; (8001048 <SystemClock_Config+0xd8>)
 8000fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	4b23      	ldr	r3, [pc, #140]	; (8001048 <SystemClock_Config+0xd8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000fd8:	2319      	movs	r3, #25
 8000fda:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 432;
 8000fdc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000fe0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fea:	f107 0320 	add.w	r3, r7, #32
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fdd6 	bl	8001ba0 <HAL_RCC_OscConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8000ffa:	f000 f839 	bl	8001070 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ffe:	f000 fd7f 	bl	8001b00 <HAL_PWREx_EnableOverDrive>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8001008:	f000 f832 	bl	8001070 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100c:	230f      	movs	r3, #15
 800100e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001010:	2302      	movs	r3, #2
 8001012:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001018:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800101c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800101e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001022:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2107      	movs	r1, #7
 800102a:	4618      	mov	r0, r3
 800102c:	f001 f85c 	bl	80020e8 <HAL_RCC_ClockConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0xca>
	{
		Error_Handler();
 8001036:	f000 f81b 	bl	8001070 <Error_Handler>
	}
}
 800103a:	bf00      	nop
 800103c:	3750      	adds	r7, #80	; 0x50
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40007000 	.word	0x40007000

0800104c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800105e:	f000 fa6d 	bl	800153c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40001000 	.word	0x40001000

08001070 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
}
 8001076:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001078:	e7fe      	b.n	8001078 <Error_Handler+0x8>
	...

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_MspInit+0x4c>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	4a10      	ldr	r2, [pc, #64]	; (80010c8 <HAL_MspInit+0x4c>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108c:	6413      	str	r3, [r2, #64]	; 0x40
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_MspInit+0x4c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_MspInit+0x4c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <HAL_MspInit+0x4c>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HAL_MspInit+0x4c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	210f      	movs	r1, #15
 80010b6:	f06f 0001 	mvn.w	r0, #1
 80010ba:	f000 fb17 	bl	80016ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800

080010cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08e      	sub	sp, #56	; 0x38
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010dc:	4b33      	ldr	r3, [pc, #204]	; (80011ac <HAL_InitTick+0xe0>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	4a32      	ldr	r2, [pc, #200]	; (80011ac <HAL_InitTick+0xe0>)
 80010e2:	f043 0310 	orr.w	r3, r3, #16
 80010e6:	6413      	str	r3, [r2, #64]	; 0x40
 80010e8:	4b30      	ldr	r3, [pc, #192]	; (80011ac <HAL_InitTick+0xe0>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	f003 0310 	and.w	r3, r3, #16
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010f4:	f107 0210 	add.w	r2, r7, #16
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 f9d8 	bl	80024b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110a:	2b00      	cmp	r3, #0
 800110c:	d103      	bne.n	8001116 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800110e:	f001 f9a9 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 8001112:	6378      	str	r0, [r7, #52]	; 0x34
 8001114:	e004      	b.n	8001120 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001116:	f001 f9a5 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 800111a:	4603      	mov	r3, r0
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001122:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <HAL_InitTick+0xe4>)
 8001124:	fba2 2303 	umull	r2, r3, r2, r3
 8001128:	0c9b      	lsrs	r3, r3, #18
 800112a:	3b01      	subs	r3, #1
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <HAL_InitTick+0xe8>)
 8001130:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <HAL_InitTick+0xec>)
 8001132:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <HAL_InitTick+0xe8>)
 8001136:	f240 32e7 	movw	r2, #999	; 0x3e7
 800113a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800113c:	4a1d      	ldr	r2, [pc, #116]	; (80011b4 <HAL_InitTick+0xe8>)
 800113e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001140:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_InitTick+0xe8>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <HAL_InitTick+0xe8>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_InitTick+0xe8>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001154:	4817      	ldr	r0, [pc, #92]	; (80011b4 <HAL_InitTick+0xe8>)
 8001156:	f001 fdcf 	bl	8002cf8 <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001160:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001164:	2b00      	cmp	r3, #0
 8001166:	d11b      	bne.n	80011a0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001168:	4812      	ldr	r0, [pc, #72]	; (80011b4 <HAL_InitTick+0xe8>)
 800116a:	f001 fe27 	bl	8002dbc <HAL_TIM_Base_Start_IT>
 800116e:	4603      	mov	r3, r0
 8001170:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001174:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001178:	2b00      	cmp	r3, #0
 800117a:	d111      	bne.n	80011a0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800117c:	2036      	movs	r0, #54	; 0x36
 800117e:	f000 fad1 	bl	8001724 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0f      	cmp	r3, #15
 8001186:	d808      	bhi.n	800119a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001188:	2200      	movs	r2, #0
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	2036      	movs	r0, #54	; 0x36
 800118e:	f000 faad 	bl	80016ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <HAL_InitTick+0xf0>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	e002      	b.n	80011a0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3738      	adds	r7, #56	; 0x38
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40023800 	.word	0x40023800
 80011b0:	431bde83 	.word	0x431bde83
 80011b4:	200002ec 	.word	0x200002ec
 80011b8:	40001000 	.word	0x40001000
 80011bc:	20000004 	.word	0x20000004

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c4:	e7fe      	b.n	80011c4 <NMI_Handler+0x4>

080011c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler+0x4>

080011d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <UsageFault_Handler+0x4>

080011de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <TIM6_DAC_IRQHandler+0x10>)
 80011f2:	f001 fe5b 	bl	8002eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200002ec 	.word	0x200002ec

08001200 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	e00a      	b.n	8001228 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001212:	f3af 8000 	nop.w
 8001216:	4601      	mov	r1, r0
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	60ba      	str	r2, [r7, #8]
 800121e:	b2ca      	uxtb	r2, r1
 8001220:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3301      	adds	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	dbf0      	blt.n	8001212 <_read+0x12>
  }

  return len;
 8001230:	687b      	ldr	r3, [r7, #4]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	60f8      	str	r0, [r7, #12]
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	e009      	b.n	8001260 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	60ba      	str	r2, [r7, #8]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fe0b 	bl	8000e70 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	429a      	cmp	r2, r3
 8001266:	dbf1      	blt.n	800124c <_write+0x12>
  }
  return len;
 8001268:	687b      	ldr	r3, [r7, #4]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <_close>:

int _close(int file)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800129a:	605a      	str	r2, [r3, #4]
  return 0;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <_isatty>:

int _isatty(int file)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e4:	4a14      	ldr	r2, [pc, #80]	; (8001338 <_sbrk+0x5c>)
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <_sbrk+0x60>)
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <_sbrk+0x64>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <_sbrk+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	429a      	cmp	r2, r3
 800130a:	d207      	bcs.n	800131c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800130c:	f004 f92e 	bl	800556c <__errno>
 8001310:	4603      	mov	r3, r0
 8001312:	220c      	movs	r2, #12
 8001314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	e009      	b.n	8001330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <_sbrk+0x64>)
 800132c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132e:	68fb      	ldr	r3, [r7, #12]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20050000 	.word	0x20050000
 800133c:	00000400 	.word	0x00000400
 8001340:	20000338 	.word	0x20000338
 8001344:	20004260 	.word	0x20004260

08001348 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <SystemInit+0x20>)
 800134e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <SystemInit+0x20>)
 8001354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 8001372:	4a15      	ldr	r2, [pc, #84]	; (80013c8 <MX_USART1_UART_Init+0x5c>)
 8001374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 8001378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800137c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 80013b0:	f001 ff82 	bl	80032b8 <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013ba:	f7ff fe59 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000033c 	.word	0x2000033c
 80013c8:	40011000 	.word	0x40011000

080013cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0ac      	sub	sp, #176	; 0xb0
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e4:	f107 0318 	add.w	r3, r7, #24
 80013e8:	2284      	movs	r2, #132	; 0x84
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f004 f86f 	bl	80054d0 <memset>
  if(uartHandle->Instance==USART1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a32      	ldr	r2, [pc, #200]	; (80014c0 <HAL_UART_MspInit+0xf4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d15c      	bne.n	80014b6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013fc:	2340      	movs	r3, #64	; 0x40
 80013fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001400:	2300      	movs	r3, #0
 8001402:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001404:	f107 0318 	add.w	r3, r7, #24
 8001408:	4618      	mov	r0, r3
 800140a:	f001 f885 	bl	8002518 <HAL_RCCEx_PeriphCLKConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001414:	f7ff fe2c 	bl	8001070 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001418:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <HAL_UART_MspInit+0xf8>)
 800141a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141c:	4a29      	ldr	r2, [pc, #164]	; (80014c4 <HAL_UART_MspInit+0xf8>)
 800141e:	f043 0310 	orr.w	r3, r3, #16
 8001422:	6453      	str	r3, [r2, #68]	; 0x44
 8001424:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <HAL_UART_MspInit+0xf8>)
 8001426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001428:	f003 0310 	and.w	r3, r3, #16
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_UART_MspInit+0xf8>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	4a23      	ldr	r2, [pc, #140]	; (80014c4 <HAL_UART_MspInit+0xf8>)
 8001436:	f043 0302 	orr.w	r3, r3, #2
 800143a:	6313      	str	r3, [r2, #48]	; 0x30
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_UART_MspInit+0xf8>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <HAL_UART_MspInit+0xf8>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <HAL_UART_MspInit+0xf8>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6313      	str	r3, [r2, #48]	; 0x30
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_UART_MspInit+0xf8>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001478:	2307      	movs	r3, #7
 800147a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001482:	4619      	mov	r1, r3
 8001484:	4810      	ldr	r0, [pc, #64]	; (80014c8 <HAL_UART_MspInit+0xfc>)
 8001486:	f000 f95b 	bl	8001740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800148a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014a4:	2307      	movs	r3, #7
 80014a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014ae:	4619      	mov	r1, r3
 80014b0:	4806      	ldr	r0, [pc, #24]	; (80014cc <HAL_UART_MspInit+0x100>)
 80014b2:	f000 f945 	bl	8001740 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014b6:	bf00      	nop
 80014b8:	37b0      	adds	r7, #176	; 0xb0
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40011000 	.word	0x40011000
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40020000 	.word	0x40020000

080014d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001508 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014d6:	490e      	ldr	r1, [pc, #56]	; (8001510 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014d8:	4a0e      	ldr	r2, [pc, #56]	; (8001514 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014ec:	4c0b      	ldr	r4, [pc, #44]	; (800151c <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014fa:	f7ff ff25 	bl	8001348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fe:	f004 f83b 	bl	8005578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001502:	f7ff fcef 	bl	8000ee4 <main>
  bx  lr    
 8001506:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001508:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001514:	08005ae0 	.word	0x08005ae0
  ldr r2, =_sbss
 8001518:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800151c:	20004260 	.word	0x20004260

08001520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC_IRQHandler>

08001522 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001526:	2003      	movs	r0, #3
 8001528:	f000 f8d5 	bl	80016d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152c:	200f      	movs	r0, #15
 800152e:	f7ff fdcd 	bl	80010cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001532:	f7ff fda3 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_IncTick+0x20>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_IncTick+0x24>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <HAL_IncTick+0x24>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008
 8001560:	200003c4 	.word	0x200003c4

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	200003c4 	.word	0x200003c4

0800157c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <__NVIC_SetPriorityGrouping+0x40>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015aa:	4a04      	ldr	r2, [pc, #16]	; (80015bc <__NVIC_SetPriorityGrouping+0x40>)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	60d3      	str	r3, [r2, #12]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00
 80015c0:	05fa0000 	.word	0x05fa0000

080015c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	db0b      	blt.n	800160a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	f003 021f 	and.w	r2, r3, #31
 80015f8:	4907      	ldr	r1, [pc, #28]	; (8001618 <__NVIC_EnableIRQ+0x38>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	2001      	movs	r0, #1
 8001602:	fa00 f202 	lsl.w	r2, r0, r2
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000e100 	.word	0xe000e100

0800161c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0a      	blt.n	8001646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	490c      	ldr	r1, [pc, #48]	; (8001668 <__NVIC_SetPriority+0x4c>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	440b      	add	r3, r1
 8001640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001644:	e00a      	b.n	800165c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <__NVIC_SetPriority+0x50>)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3b04      	subs	r3, #4
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	440b      	add	r3, r1
 800165a:	761a      	strb	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1c3 0307 	rsb	r3, r3, #7
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf28      	it	cs
 800168e:	2304      	movcs	r3, #4
 8001690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3304      	adds	r3, #4
 8001696:	2b06      	cmp	r3, #6
 8001698:	d902      	bls.n	80016a0 <NVIC_EncodePriority+0x30>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b03      	subs	r3, #3
 800169e:	e000      	b.n	80016a2 <NVIC_EncodePriority+0x32>
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	4313      	orrs	r3, r2
         );
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ff4c 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fe:	f7ff ff61 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 8001702:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	68b9      	ldr	r1, [r7, #8]
 8001708:	6978      	ldr	r0, [r7, #20]
 800170a:	f7ff ffb1 	bl	8001670 <NVIC_EncodePriority>
 800170e:	4602      	mov	r2, r0
 8001710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff80 	bl	800161c <__NVIC_SetPriority>
}
 800171c:	bf00      	nop
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ff54 	bl	80015e0 <__NVIC_EnableIRQ>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
 800175e:	e175      	b.n	8001a4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001760:	2201      	movs	r2, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	429a      	cmp	r2, r3
 800177a:	f040 8164 	bne.w	8001a46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b01      	cmp	r3, #1
 8001788:	d005      	beq.n	8001796 <HAL_GPIO_Init+0x56>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d130      	bne.n	80017f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	2203      	movs	r2, #3
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	f003 0201 	and.w	r2, r3, #1
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b03      	cmp	r3, #3
 8001802:	d017      	beq.n	8001834 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d123      	bne.n	8001888 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	08da      	lsrs	r2, r3, #3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3208      	adds	r2, #8
 8001848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	220f      	movs	r2, #15
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	08da      	lsrs	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3208      	adds	r2, #8
 8001882:	69b9      	ldr	r1, [r7, #24]
 8001884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	2203      	movs	r2, #3
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0203 	and.w	r2, r3, #3
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80be 	beq.w	8001a46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	4b66      	ldr	r3, [pc, #408]	; (8001a64 <HAL_GPIO_Init+0x324>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a65      	ldr	r2, [pc, #404]	; (8001a64 <HAL_GPIO_Init+0x324>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b63      	ldr	r3, [pc, #396]	; (8001a64 <HAL_GPIO_Init+0x324>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018e2:	4a61      	ldr	r2, [pc, #388]	; (8001a68 <HAL_GPIO_Init+0x328>)
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	3302      	adds	r3, #2
 80018ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a58      	ldr	r2, [pc, #352]	; (8001a6c <HAL_GPIO_Init+0x32c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d037      	beq.n	800197e <HAL_GPIO_Init+0x23e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a57      	ldr	r2, [pc, #348]	; (8001a70 <HAL_GPIO_Init+0x330>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d031      	beq.n	800197a <HAL_GPIO_Init+0x23a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a56      	ldr	r2, [pc, #344]	; (8001a74 <HAL_GPIO_Init+0x334>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d02b      	beq.n	8001976 <HAL_GPIO_Init+0x236>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a55      	ldr	r2, [pc, #340]	; (8001a78 <HAL_GPIO_Init+0x338>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d025      	beq.n	8001972 <HAL_GPIO_Init+0x232>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a54      	ldr	r2, [pc, #336]	; (8001a7c <HAL_GPIO_Init+0x33c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01f      	beq.n	800196e <HAL_GPIO_Init+0x22e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a53      	ldr	r2, [pc, #332]	; (8001a80 <HAL_GPIO_Init+0x340>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d019      	beq.n	800196a <HAL_GPIO_Init+0x22a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a52      	ldr	r2, [pc, #328]	; (8001a84 <HAL_GPIO_Init+0x344>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_GPIO_Init+0x226>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a51      	ldr	r2, [pc, #324]	; (8001a88 <HAL_GPIO_Init+0x348>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00d      	beq.n	8001962 <HAL_GPIO_Init+0x222>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a50      	ldr	r2, [pc, #320]	; (8001a8c <HAL_GPIO_Init+0x34c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d007      	beq.n	800195e <HAL_GPIO_Init+0x21e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4f      	ldr	r2, [pc, #316]	; (8001a90 <HAL_GPIO_Init+0x350>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d101      	bne.n	800195a <HAL_GPIO_Init+0x21a>
 8001956:	2309      	movs	r3, #9
 8001958:	e012      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800195a:	230a      	movs	r3, #10
 800195c:	e010      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800195e:	2308      	movs	r3, #8
 8001960:	e00e      	b.n	8001980 <HAL_GPIO_Init+0x240>
 8001962:	2307      	movs	r3, #7
 8001964:	e00c      	b.n	8001980 <HAL_GPIO_Init+0x240>
 8001966:	2306      	movs	r3, #6
 8001968:	e00a      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800196a:	2305      	movs	r3, #5
 800196c:	e008      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800196e:	2304      	movs	r3, #4
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x240>
 8001972:	2303      	movs	r3, #3
 8001974:	e004      	b.n	8001980 <HAL_GPIO_Init+0x240>
 8001976:	2302      	movs	r3, #2
 8001978:	e002      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800197e:	2300      	movs	r3, #0
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	f002 0203 	and.w	r2, r2, #3
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	4093      	lsls	r3, r2
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001990:	4935      	ldr	r1, [pc, #212]	; (8001a68 <HAL_GPIO_Init+0x328>)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	3302      	adds	r3, #2
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800199e:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <HAL_GPIO_Init+0x354>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019c2:	4a34      	ldr	r2, [pc, #208]	; (8001a94 <HAL_GPIO_Init+0x354>)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c8:	4b32      	ldr	r3, [pc, #200]	; (8001a94 <HAL_GPIO_Init+0x354>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019ec:	4a29      	ldr	r2, [pc, #164]	; (8001a94 <HAL_GPIO_Init+0x354>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019f2:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <HAL_GPIO_Init+0x354>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a16:	4a1f      	ldr	r2, [pc, #124]	; (8001a94 <HAL_GPIO_Init+0x354>)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_GPIO_Init+0x354>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a40:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <HAL_GPIO_Init+0x354>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	2b0f      	cmp	r3, #15
 8001a50:	f67f ae86 	bls.w	8001760 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3724      	adds	r7, #36	; 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40013800 	.word	0x40013800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40020400 	.word	0x40020400
 8001a74:	40020800 	.word	0x40020800
 8001a78:	40020c00 	.word	0x40020c00
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40021400 	.word	0x40021400
 8001a84:	40021800 	.word	0x40021800
 8001a88:	40021c00 	.word	0x40021c00
 8001a8c:	40022000 	.word	0x40022000
 8001a90:	40022400 	.word	0x40022400
 8001a94:	40013c00 	.word	0x40013c00

08001a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa8:	787b      	ldrb	r3, [r7, #1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ab4:	e003      	b.n	8001abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ab6:	887b      	ldrh	r3, [r7, #2]
 8001ab8:	041a      	lsls	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	619a      	str	r2, [r3, #24]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001adc:	887a      	ldrh	r2, [r7, #2]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	041a      	lsls	r2, r3, #16
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	400b      	ands	r3, r1
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	619a      	str	r2, [r3, #24]
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a22      	ldr	r2, [pc, #136]	; (8001b98 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b22:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b2e:	f7ff fd19 	bl	8001564 <HAL_GetTick>
 8001b32:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b34:	e009      	b.n	8001b4a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b36:	f7ff fd15 	bl	8001564 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b44:	d901      	bls.n	8001b4a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e022      	b.n	8001b90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b56:	d1ee      	bne.n	8001b36 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b58:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b64:	f7ff fcfe 	bl	8001564 <HAL_GetTick>
 8001b68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b6a:	e009      	b.n	8001b80 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b6c:	f7ff fcfa 	bl	8001564 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b7a:	d901      	bls.n	8001b80 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e007      	b.n	8001b90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b8c:	d1ee      	bne.n	8001b6c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40007000 	.word	0x40007000

08001ba0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e291      	b.n	80020da <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8087 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc4:	4b96      	ldr	r3, [pc, #600]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d00c      	beq.n	8001bea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bd0:	4b93      	ldr	r3, [pc, #588]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d112      	bne.n	8001c02 <HAL_RCC_OscConfig+0x62>
 8001bdc:	4b90      	ldr	r3, [pc, #576]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001be8:	d10b      	bne.n	8001c02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bea:	4b8d      	ldr	r3, [pc, #564]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d06c      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x130>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d168      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e26b      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x7a>
 8001c0c:	4b84      	ldr	r3, [pc, #528]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a83      	ldr	r2, [pc, #524]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e02e      	b.n	8001c78 <HAL_RCC_OscConfig+0xd8>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x9c>
 8001c22:	4b7f      	ldr	r3, [pc, #508]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a7e      	ldr	r2, [pc, #504]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b7c      	ldr	r3, [pc, #496]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a7b      	ldr	r2, [pc, #492]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e01d      	b.n	8001c78 <HAL_RCC_OscConfig+0xd8>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0xc0>
 8001c46:	4b76      	ldr	r3, [pc, #472]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a75      	ldr	r2, [pc, #468]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b73      	ldr	r3, [pc, #460]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a72      	ldr	r2, [pc, #456]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e00b      	b.n	8001c78 <HAL_RCC_OscConfig+0xd8>
 8001c60:	4b6f      	ldr	r3, [pc, #444]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a6e      	ldr	r2, [pc, #440]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b6c      	ldr	r3, [pc, #432]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a6b      	ldr	r2, [pc, #428]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d013      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff fc70 	bl	8001564 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fc6c 	bl	8001564 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e21f      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0xe8>
 8001ca6:	e014      	b.n	8001cd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fc5c 	bl	8001564 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fc58 	bl	8001564 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e20b      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	4b57      	ldr	r3, [pc, #348]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x110>
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d069      	beq.n	8001db2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cde:	4b50      	ldr	r3, [pc, #320]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cea:	4b4d      	ldr	r3, [pc, #308]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d11c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x190>
 8001cf6:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d116      	bne.n	8001d30 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d02:	4b47      	ldr	r3, [pc, #284]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_RCC_OscConfig+0x17a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e1df      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1a:	4b41      	ldr	r3, [pc, #260]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	493d      	ldr	r1, [pc, #244]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	e040      	b.n	8001db2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d023      	beq.n	8001d80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d38:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a38      	ldr	r2, [pc, #224]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7ff fc0e 	bl	8001564 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4c:	f7ff fc0a 	bl	8001564 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e1bd      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5e:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6a:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4929      	ldr	r1, [pc, #164]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]
 8001d7e:	e018      	b.n	8001db2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d80:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a26      	ldr	r2, [pc, #152]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d86:	f023 0301 	bic.w	r3, r3, #1
 8001d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fbea 	bl	8001564 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d94:	f7ff fbe6 	bl	8001564 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e199      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d038      	beq.n	8001e30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d019      	beq.n	8001dfa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dca:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd2:	f7ff fbc7 	bl	8001564 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dda:	f7ff fbc3 	bl	8001564 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e176      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x23a>
 8001df8:	e01a      	b.n	8001e30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e06:	f7ff fbad 	bl	8001564 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0e:	f7ff fba9 	bl	8001564 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d903      	bls.n	8001e24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e15c      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
 8001e20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e24:	4b91      	ldr	r3, [pc, #580]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80a4 	beq.w	8001f86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3e:	4b8b      	ldr	r3, [pc, #556]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10d      	bne.n	8001e66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	4b88      	ldr	r3, [pc, #544]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a87      	ldr	r2, [pc, #540]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b85      	ldr	r3, [pc, #532]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e62:	2301      	movs	r3, #1
 8001e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e66:	4b82      	ldr	r3, [pc, #520]	; (8002070 <HAL_RCC_OscConfig+0x4d0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d118      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e72:	4b7f      	ldr	r3, [pc, #508]	; (8002070 <HAL_RCC_OscConfig+0x4d0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a7e      	ldr	r2, [pc, #504]	; (8002070 <HAL_RCC_OscConfig+0x4d0>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fb71 	bl	8001564 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e86:	f7ff fb6d 	bl	8001564 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b64      	cmp	r3, #100	; 0x64
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e120      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e98:	4b75      	ldr	r3, [pc, #468]	; (8002070 <HAL_RCC_OscConfig+0x4d0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x31a>
 8001eac:	4b6f      	ldr	r3, [pc, #444]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb0:	4a6e      	ldr	r2, [pc, #440]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb8:	e02d      	b.n	8001f16 <HAL_RCC_OscConfig+0x376>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x33c>
 8001ec2:	4b6a      	ldr	r3, [pc, #424]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	4a69      	ldr	r2, [pc, #420]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001ec8:	f023 0301 	bic.w	r3, r3, #1
 8001ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ece:	4b67      	ldr	r3, [pc, #412]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	4a66      	ldr	r2, [pc, #408]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001ed4:	f023 0304 	bic.w	r3, r3, #4
 8001ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eda:	e01c      	b.n	8001f16 <HAL_RCC_OscConfig+0x376>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b05      	cmp	r3, #5
 8001ee2:	d10c      	bne.n	8001efe <HAL_RCC_OscConfig+0x35e>
 8001ee4:	4b61      	ldr	r3, [pc, #388]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee8:	4a60      	ldr	r2, [pc, #384]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef0:	4b5e      	ldr	r3, [pc, #376]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef4:	4a5d      	ldr	r2, [pc, #372]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6713      	str	r3, [r2, #112]	; 0x70
 8001efc:	e00b      	b.n	8001f16 <HAL_RCC_OscConfig+0x376>
 8001efe:	4b5b      	ldr	r3, [pc, #364]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f02:	4a5a      	ldr	r2, [pc, #360]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0a:	4b58      	ldr	r3, [pc, #352]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0e:	4a57      	ldr	r2, [pc, #348]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f10:	f023 0304 	bic.w	r3, r3, #4
 8001f14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d015      	beq.n	8001f4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1e:	f7ff fb21 	bl	8001564 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7ff fb1d 	bl	8001564 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e0ce      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3c:	4b4b      	ldr	r3, [pc, #300]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0ee      	beq.n	8001f26 <HAL_RCC_OscConfig+0x386>
 8001f48:	e014      	b.n	8001f74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fb0b 	bl	8001564 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f7ff fb07 	bl	8001564 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0b8      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f68:	4b40      	ldr	r3, [pc, #256]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1ee      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d105      	bne.n	8001f86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7a:	4b3c      	ldr	r3, [pc, #240]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a3b      	ldr	r2, [pc, #236]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80a4 	beq.w	80020d8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f90:	4b36      	ldr	r3, [pc, #216]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d06b      	beq.n	8002074 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d149      	bne.n	8002038 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa4:	4b31      	ldr	r3, [pc, #196]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a30      	ldr	r2, [pc, #192]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fad8 	bl	8001564 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff fad4 	bl	8001564 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e087      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fca:	4b28      	ldr	r3, [pc, #160]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69da      	ldr	r2, [r3, #28]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	019b      	lsls	r3, r3, #6
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	085b      	lsrs	r3, r3, #1
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	041b      	lsls	r3, r3, #16
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	061b      	lsls	r3, r3, #24
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	4a1b      	ldr	r2, [pc, #108]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001ffe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002002:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a18      	ldr	r2, [pc, #96]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 800200a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800200e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7ff faa8 	bl	8001564 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002018:	f7ff faa4 	bl	8001564 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e057      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x478>
 8002036:	e04f      	b.n	80020d8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0b      	ldr	r2, [pc, #44]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 800203e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7ff fa8e 	bl	8001564 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7ff fa8a 	bl	8001564 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e03d      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	4b03      	ldr	r3, [pc, #12]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x4ac>
 800206a:	e035      	b.n	80020d8 <HAL_RCC_OscConfig+0x538>
 800206c:	40023800 	.word	0x40023800
 8002070:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002074:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_RCC_OscConfig+0x544>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d028      	beq.n	80020d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208c:	429a      	cmp	r2, r3
 800208e:	d121      	bne.n	80020d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d11a      	bne.n	80020d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020a4:	4013      	ands	r3, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d111      	bne.n	80020d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	3b01      	subs	r3, #1
 80020be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800

080020e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0d0      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b6a      	ldr	r3, [pc, #424]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d910      	bls.n	8002130 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b67      	ldr	r3, [pc, #412]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 020f 	bic.w	r2, r3, #15
 8002116:	4965      	ldr	r1, [pc, #404]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b63      	ldr	r3, [pc, #396]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b8      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a58      	ldr	r2, [pc, #352]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800214e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002152:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800216a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	494d      	ldr	r1, [pc, #308]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800217a:	4313      	orrs	r3, r2
 800217c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d040      	beq.n	800220c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d115      	bne.n	80021ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e073      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e06b      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4936      	ldr	r1, [pc, #216]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021dc:	f7ff f9c2 	bl	8001564 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7ff f9be 	bl	8001564 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e053      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d210      	bcs.n	800223c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 020f 	bic.w	r2, r3, #15
 8002222:	4922      	ldr	r1, [pc, #136]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e032      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4916      	ldr	r1, [pc, #88]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	490e      	ldr	r1, [pc, #56]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800227a:	f000 f821 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 800227e:	4602      	mov	r2, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	490a      	ldr	r1, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x1cc>)
 800228c:	5ccb      	ldrb	r3, [r1, r3]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1d4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe ff16 	bl	80010cc <HAL_InitTick>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023c00 	.word	0x40023c00
 80022b0:	40023800 	.word	0x40023800
 80022b4:	08005ab8 	.word	0x08005ab8
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000004 	.word	0x20000004

080022c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c4:	b090      	sub	sp, #64	; 0x40
 80022c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	637b      	str	r3, [r7, #52]	; 0x34
 80022cc:	2300      	movs	r3, #0
 80022ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d0:	2300      	movs	r3, #0
 80022d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d8:	4b59      	ldr	r3, [pc, #356]	; (8002440 <HAL_RCC_GetSysClockFreq+0x180>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d00d      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x40>
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	f200 80a1 	bhi.w	800242c <HAL_RCC_GetSysClockFreq+0x16c>
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <HAL_RCC_GetSysClockFreq+0x34>
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d003      	beq.n	80022fa <HAL_RCC_GetSysClockFreq+0x3a>
 80022f2:	e09b      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f4:	4b53      	ldr	r3, [pc, #332]	; (8002444 <HAL_RCC_GetSysClockFreq+0x184>)
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022f8:	e09b      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022fa:	4b53      	ldr	r3, [pc, #332]	; (8002448 <HAL_RCC_GetSysClockFreq+0x188>)
 80022fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022fe:	e098      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002300:	4b4f      	ldr	r3, [pc, #316]	; (8002440 <HAL_RCC_GetSysClockFreq+0x180>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002308:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800230a:	4b4d      	ldr	r3, [pc, #308]	; (8002440 <HAL_RCC_GetSysClockFreq+0x180>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d028      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002316:	4b4a      	ldr	r3, [pc, #296]	; (8002440 <HAL_RCC_GetSysClockFreq+0x180>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	099b      	lsrs	r3, r3, #6
 800231c:	2200      	movs	r2, #0
 800231e:	623b      	str	r3, [r7, #32]
 8002320:	627a      	str	r2, [r7, #36]	; 0x24
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002328:	2100      	movs	r1, #0
 800232a:	4b47      	ldr	r3, [pc, #284]	; (8002448 <HAL_RCC_GetSysClockFreq+0x188>)
 800232c:	fb03 f201 	mul.w	r2, r3, r1
 8002330:	2300      	movs	r3, #0
 8002332:	fb00 f303 	mul.w	r3, r0, r3
 8002336:	4413      	add	r3, r2
 8002338:	4a43      	ldr	r2, [pc, #268]	; (8002448 <HAL_RCC_GetSysClockFreq+0x188>)
 800233a:	fba0 1202 	umull	r1, r2, r0, r2
 800233e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002340:	460a      	mov	r2, r1
 8002342:	62ba      	str	r2, [r7, #40]	; 0x28
 8002344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002346:	4413      	add	r3, r2
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800234a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800234c:	2200      	movs	r2, #0
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	61fa      	str	r2, [r7, #28]
 8002352:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002356:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800235a:	f7fd ff59 	bl	8000210 <__aeabi_uldivmod>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4613      	mov	r3, r2
 8002364:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002366:	e053      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002368:	4b35      	ldr	r3, [pc, #212]	; (8002440 <HAL_RCC_GetSysClockFreq+0x180>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	099b      	lsrs	r3, r3, #6
 800236e:	2200      	movs	r2, #0
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	617a      	str	r2, [r7, #20]
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800237a:	f04f 0b00 	mov.w	fp, #0
 800237e:	4652      	mov	r2, sl
 8002380:	465b      	mov	r3, fp
 8002382:	f04f 0000 	mov.w	r0, #0
 8002386:	f04f 0100 	mov.w	r1, #0
 800238a:	0159      	lsls	r1, r3, #5
 800238c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002390:	0150      	lsls	r0, r2, #5
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	ebb2 080a 	subs.w	r8, r2, sl
 800239a:	eb63 090b 	sbc.w	r9, r3, fp
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023b2:	ebb2 0408 	subs.w	r4, r2, r8
 80023b6:	eb63 0509 	sbc.w	r5, r3, r9
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	00eb      	lsls	r3, r5, #3
 80023c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023c8:	00e2      	lsls	r2, r4, #3
 80023ca:	4614      	mov	r4, r2
 80023cc:	461d      	mov	r5, r3
 80023ce:	eb14 030a 	adds.w	r3, r4, sl
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	eb45 030b 	adc.w	r3, r5, fp
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023e6:	4629      	mov	r1, r5
 80023e8:	028b      	lsls	r3, r1, #10
 80023ea:	4621      	mov	r1, r4
 80023ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023f0:	4621      	mov	r1, r4
 80023f2:	028a      	lsls	r2, r1, #10
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fa:	2200      	movs	r2, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	60fa      	str	r2, [r7, #12]
 8002400:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002404:	f7fd ff04 	bl	8000210 <__aeabi_uldivmod>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4613      	mov	r3, r2
 800240e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_GetSysClockFreq+0x180>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	3301      	adds	r3, #1
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002420:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002424:	fbb2 f3f3 	udiv	r3, r2, r3
 8002428:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800242a:	e002      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RCC_GetSysClockFreq+0x184>)
 800242e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002434:	4618      	mov	r0, r3
 8002436:	3740      	adds	r7, #64	; 0x40
 8002438:	46bd      	mov	sp, r7
 800243a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	00f42400 	.word	0x00f42400
 8002448:	017d7840 	.word	0x017d7840

0800244c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <HAL_RCC_GetHCLKFreq+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000000 	.word	0x20000000

08002464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002468:	f7ff fff0 	bl	800244c <HAL_RCC_GetHCLKFreq>
 800246c:	4602      	mov	r2, r0
 800246e:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	0a9b      	lsrs	r3, r3, #10
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4903      	ldr	r1, [pc, #12]	; (8002488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	08005ac8 	.word	0x08005ac8

0800248c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002490:	f7ff ffdc 	bl	800244c <HAL_RCC_GetHCLKFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	0b5b      	lsrs	r3, r3, #13
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	4903      	ldr	r1, [pc, #12]	; (80024b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a2:	5ccb      	ldrb	r3, [r1, r3]
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	08005ac8 	.word	0x08005ac8

080024b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	220f      	movs	r2, #15
 80024c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_RCC_GetClockConfig+0x5c>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0203 	and.w	r2, r3, #3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_RCC_GetClockConfig+0x5c>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <HAL_RCC_GetClockConfig+0x5c>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_RCC_GetClockConfig+0x5c>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	08db      	lsrs	r3, r3, #3
 80024ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <HAL_RCC_GetClockConfig+0x60>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 020f 	and.w	r2, r3, #15
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	601a      	str	r2, [r3, #0]
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
 8002514:	40023c00 	.word	0x40023c00

08002518 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d012      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002540:	4b69      	ldr	r3, [pc, #420]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a68      	ldr	r2, [pc, #416]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002546:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800254a:	6093      	str	r3, [r2, #8]
 800254c:	4b66      	ldr	r3, [pc, #408]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002554:	4964      	ldr	r1, [pc, #400]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002556:	4313      	orrs	r3, r2
 8002558:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002562:	2301      	movs	r3, #1
 8002564:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d017      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002572:	4b5d      	ldr	r3, [pc, #372]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002578:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002580:	4959      	ldr	r1, [pc, #356]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002590:	d101      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002592:	2301      	movs	r3, #1
 8002594:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800259e:	2301      	movs	r3, #1
 80025a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d017      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025ae:	4b4e      	ldr	r3, [pc, #312]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	494a      	ldr	r1, [pc, #296]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025cc:	d101      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80025ce:	2301      	movs	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80025da:	2301      	movs	r3, #1
 80025dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80025ea:	2301      	movs	r3, #1
 80025ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 808b 	beq.w	8002712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025fc:	4b3a      	ldr	r3, [pc, #232]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	4a39      	ldr	r2, [pc, #228]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002606:	6413      	str	r3, [r2, #64]	; 0x40
 8002608:	4b37      	ldr	r3, [pc, #220]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002614:	4b35      	ldr	r3, [pc, #212]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a34      	ldr	r2, [pc, #208]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800261a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002620:	f7fe ffa0 	bl	8001564 <HAL_GetTick>
 8002624:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002628:	f7fe ff9c 	bl	8001564 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	; 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e357      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800263a:	4b2c      	ldr	r3, [pc, #176]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002646:	4b28      	ldr	r3, [pc, #160]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800264e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d035      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	429a      	cmp	r2, r3
 8002662:	d02e      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002664:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800266c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800266e:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	4a1d      	ldr	r2, [pc, #116]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002678:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800267a:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	4a1a      	ldr	r2, [pc, #104]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002684:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002686:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800268c:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d114      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7fe ff64 	bl	8001564 <HAL_GetTick>
 800269c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269e:	e00a      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a0:	f7fe ff60 	bl	8001564 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e319      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0ee      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026ce:	d111      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026de:	400b      	ands	r3, r1
 80026e0:	4901      	ldr	r1, [pc, #4]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
 80026e6:	e00b      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40007000 	.word	0x40007000
 80026f0:	0ffffcff 	.word	0x0ffffcff
 80026f4:	4baa      	ldr	r3, [pc, #680]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4aa9      	ldr	r2, [pc, #676]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80026fe:	6093      	str	r3, [r2, #8]
 8002700:	4ba7      	ldr	r3, [pc, #668]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002702:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270c:	49a4      	ldr	r1, [pc, #656]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800270e:	4313      	orrs	r3, r2
 8002710:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b00      	cmp	r3, #0
 800271c:	d010      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800271e:	4ba0      	ldr	r3, [pc, #640]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002724:	4a9e      	ldr	r2, [pc, #632]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800272a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800272e:	4b9c      	ldr	r3, [pc, #624]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002730:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	4999      	ldr	r1, [pc, #612]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800274c:	4b94      	ldr	r3, [pc, #592]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800275a:	4991      	ldr	r1, [pc, #580]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800276e:	4b8c      	ldr	r3, [pc, #560]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002774:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800277c:	4988      	ldr	r1, [pc, #544]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002790:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002796:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800279e:	4980      	ldr	r1, [pc, #512]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027b2:	4b7b      	ldr	r3, [pc, #492]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	4977      	ldr	r1, [pc, #476]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027d4:	4b72      	ldr	r3, [pc, #456]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027da:	f023 0203 	bic.w	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	496f      	ldr	r1, [pc, #444]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027f6:	4b6a      	ldr	r3, [pc, #424]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fc:	f023 020c 	bic.w	r2, r3, #12
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002804:	4966      	ldr	r1, [pc, #408]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002818:	4b61      	ldr	r3, [pc, #388]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002826:	495e      	ldr	r1, [pc, #376]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800283a:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002840:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002848:	4955      	ldr	r1, [pc, #340]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800285c:	4b50      	ldr	r3, [pc, #320]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002862:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286a:	494d      	ldr	r1, [pc, #308]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800287e:	4b48      	ldr	r3, [pc, #288]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002884:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288c:	4944      	ldr	r1, [pc, #272]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80028a0:	4b3f      	ldr	r3, [pc, #252]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ae:	493c      	ldr	r1, [pc, #240]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80028c2:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d0:	4933      	ldr	r1, [pc, #204]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028e4:	4b2e      	ldr	r3, [pc, #184]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028f2:	492b      	ldr	r1, [pc, #172]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d011      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002906:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002914:	4922      	ldr	r1, [pc, #136]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002920:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002924:	d101      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002926:	2301      	movs	r3, #1
 8002928:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002936:	2301      	movs	r3, #1
 8002938:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002946:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002954:	4912      	ldr	r1, [pc, #72]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00b      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002968:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002978:	4909      	ldr	r1, [pc, #36]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d006      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 80d9 	beq.w	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002994:	4b02      	ldr	r3, [pc, #8]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a01      	ldr	r2, [pc, #4]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800299a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800299e:	e001      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80029a0:	40023800 	.word	0x40023800
 80029a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a6:	f7fe fddd 	bl	8001564 <HAL_GetTick>
 80029aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029ae:	f7fe fdd9 	bl	8001564 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b64      	cmp	r3, #100	; 0x64
 80029ba:	d901      	bls.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e194      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029c0:	4b6c      	ldr	r3, [pc, #432]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f0      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d021      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d11d      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029e0:	4b64      	ldr	r3, [pc, #400]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e6:	0c1b      	lsrs	r3, r3, #16
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029ee:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f4:	0e1b      	lsrs	r3, r3, #24
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	019a      	lsls	r2, r3, #6
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	041b      	lsls	r3, r3, #16
 8002a06:	431a      	orrs	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	061b      	lsls	r3, r3, #24
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	071b      	lsls	r3, r3, #28
 8002a14:	4957      	ldr	r1, [pc, #348]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d004      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d02e      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a46:	d129      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a48:	4b4a      	ldr	r3, [pc, #296]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4e:	0c1b      	lsrs	r3, r3, #16
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a56:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a5c:	0f1b      	lsrs	r3, r3, #28
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	019a      	lsls	r2, r3, #6
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	041b      	lsls	r3, r3, #16
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	431a      	orrs	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	071b      	lsls	r3, r3, #28
 8002a7c:	493d      	ldr	r1, [pc, #244]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a84:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a8a:	f023 021f 	bic.w	r2, r3, #31
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	3b01      	subs	r3, #1
 8002a94:	4937      	ldr	r1, [pc, #220]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d01d      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002aa8:	4b32      	ldr	r3, [pc, #200]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aae:	0e1b      	lsrs	r3, r3, #24
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ab6:	4b2f      	ldr	r3, [pc, #188]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002abc:	0f1b      	lsrs	r3, r3, #28
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	019a      	lsls	r2, r3, #6
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	041b      	lsls	r3, r3, #16
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	061b      	lsls	r3, r3, #24
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	071b      	lsls	r3, r3, #28
 8002adc:	4925      	ldr	r1, [pc, #148]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d011      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	019a      	lsls	r2, r3, #6
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	041b      	lsls	r3, r3, #16
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	061b      	lsls	r3, r3, #24
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	071b      	lsls	r3, r3, #28
 8002b0c:	4919      	ldr	r1, [pc, #100]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b14:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b20:	f7fe fd20 	bl	8001564 <HAL_GetTick>
 8002b24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b28:	f7fe fd1c 	bl	8001564 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	; 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e0d7      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	f040 80cd 	bne.w	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a08      	ldr	r2, [pc, #32]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5a:	f7fe fd03 	bl	8001564 <HAL_GetTick>
 8002b5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b62:	f7fe fcff 	bl	8001564 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b64      	cmp	r3, #100	; 0x64
 8002b6e:	d903      	bls.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e0ba      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002b74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b78:	4b5e      	ldr	r3, [pc, #376]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b84:	d0ed      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d009      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d02e      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d12a      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bae:	4b51      	ldr	r3, [pc, #324]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bbc:	4b4d      	ldr	r3, [pc, #308]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc2:	0f1b      	lsrs	r3, r3, #28
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	019a      	lsls	r2, r3, #6
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	041b      	lsls	r3, r3, #16
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	061b      	lsls	r3, r3, #24
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	071b      	lsls	r3, r3, #28
 8002be2:	4944      	ldr	r1, [pc, #272]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bea:	4b42      	ldr	r3, [pc, #264]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bf0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	493d      	ldr	r1, [pc, #244]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d022      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c18:	d11d      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c1a:	4b36      	ldr	r3, [pc, #216]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c20:	0e1b      	lsrs	r3, r3, #24
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c28:	4b32      	ldr	r3, [pc, #200]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	0f1b      	lsrs	r3, r3, #28
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	019a      	lsls	r2, r3, #6
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	431a      	orrs	r2, r3
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	061b      	lsls	r3, r3, #24
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	071b      	lsls	r3, r3, #28
 8002c4e:	4929      	ldr	r1, [pc, #164]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d028      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c62:	4b24      	ldr	r3, [pc, #144]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	0e1b      	lsrs	r3, r3, #24
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c70:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	0c1b      	lsrs	r3, r3, #16
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	019a      	lsls	r2, r3, #6
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	041b      	lsls	r3, r3, #16
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	061b      	lsls	r3, r3, #24
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	071b      	lsls	r3, r3, #28
 8002c96:	4917      	ldr	r1, [pc, #92]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	4911      	ldr	r1, [pc, #68]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0e      	ldr	r2, [pc, #56]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc0:	f7fe fc50 	bl	8001564 <HAL_GetTick>
 8002cc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cc8:	f7fe fc4c 	bl	8001564 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e007      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce6:	d1ef      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800

08002cf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e049      	b.n	8002d9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f841 	bl	8002da6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3304      	adds	r3, #4
 8002d34:	4619      	mov	r1, r3
 8002d36:	4610      	mov	r0, r2
 8002d38:	f000 fa00 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d001      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e054      	b.n	8002e7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a26      	ldr	r2, [pc, #152]	; (8002e8c <HAL_TIM_Base_Start_IT+0xd0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d022      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x80>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfe:	d01d      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x80>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a22      	ldr	r2, [pc, #136]	; (8002e90 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d018      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x80>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a21      	ldr	r2, [pc, #132]	; (8002e94 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d013      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x80>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a1f      	ldr	r2, [pc, #124]	; (8002e98 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00e      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x80>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a1e      	ldr	r2, [pc, #120]	; (8002e9c <HAL_TIM_Base_Start_IT+0xe0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d009      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x80>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ea0 <HAL_TIM_Base_Start_IT+0xe4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d004      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x80>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1b      	ldr	r2, [pc, #108]	; (8002ea4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d115      	bne.n	8002e68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_TIM_Base_Start_IT+0xec>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b06      	cmp	r3, #6
 8002e4c:	d015      	beq.n	8002e7a <HAL_TIM_Base_Start_IT+0xbe>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e54:	d011      	beq.n	8002e7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 0201 	orr.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e66:	e008      	b.n	8002e7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	e000      	b.n	8002e7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	40000400 	.word	0x40000400
 8002e94:	40000800 	.word	0x40000800
 8002e98:	40000c00 	.word	0x40000c00
 8002e9c:	40010400 	.word	0x40010400
 8002ea0:	40014000 	.word	0x40014000
 8002ea4:	40001800 	.word	0x40001800
 8002ea8:	00010007 	.word	0x00010007

08002eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d122      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d11b      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0202 	mvn.w	r2, #2
 8002ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f905 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002ef4:	e005      	b.n	8002f02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f8f7 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f908 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d122      	bne.n	8002f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d11b      	bne.n	8002f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0204 	mvn.w	r2, #4
 8002f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f8db 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002f48:	e005      	b.n	8002f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f8cd 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f8de 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d122      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d11b      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0208 	mvn.w	r2, #8
 8002f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2204      	movs	r2, #4
 8002f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f8b1 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002f9c:	e005      	b.n	8002faa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f8a3 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f8b4 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b10      	cmp	r3, #16
 8002fbc:	d122      	bne.n	8003004 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d11b      	bne.n	8003004 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0210 	mvn.w	r2, #16
 8002fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2208      	movs	r2, #8
 8002fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f887 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002ff0:	e005      	b.n	8002ffe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f879 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f88a 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d10e      	bne.n	8003030 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d107      	bne.n	8003030 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0201 	mvn.w	r2, #1
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fe f80e 	bl	800104c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303a:	2b80      	cmp	r3, #128	; 0x80
 800303c:	d10e      	bne.n	800305c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003048:	2b80      	cmp	r3, #128	; 0x80
 800304a:	d107      	bne.n	800305c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f91a 	bl	8003290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800306a:	d10e      	bne.n	800308a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003076:	2b80      	cmp	r3, #128	; 0x80
 8003078:	d107      	bne.n	800308a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f90d 	bl	80032a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	d10e      	bne.n	80030b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a2:	2b40      	cmp	r3, #64	; 0x40
 80030a4:	d107      	bne.n	80030b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f838 	bl	8003126 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d10e      	bne.n	80030e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d107      	bne.n	80030e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f06f 0220 	mvn.w	r2, #32
 80030da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f8cd 	bl	800327c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a40      	ldr	r2, [pc, #256]	; (8003250 <TIM_Base_SetConfig+0x114>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d013      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315a:	d00f      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a3d      	ldr	r2, [pc, #244]	; (8003254 <TIM_Base_SetConfig+0x118>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00b      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a3c      	ldr	r2, [pc, #240]	; (8003258 <TIM_Base_SetConfig+0x11c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d007      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a3b      	ldr	r2, [pc, #236]	; (800325c <TIM_Base_SetConfig+0x120>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d003      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a3a      	ldr	r2, [pc, #232]	; (8003260 <TIM_Base_SetConfig+0x124>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d108      	bne.n	800318e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2f      	ldr	r2, [pc, #188]	; (8003250 <TIM_Base_SetConfig+0x114>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d02b      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319c:	d027      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2c      	ldr	r2, [pc, #176]	; (8003254 <TIM_Base_SetConfig+0x118>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d023      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a2b      	ldr	r2, [pc, #172]	; (8003258 <TIM_Base_SetConfig+0x11c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01f      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a2a      	ldr	r2, [pc, #168]	; (800325c <TIM_Base_SetConfig+0x120>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01b      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a29      	ldr	r2, [pc, #164]	; (8003260 <TIM_Base_SetConfig+0x124>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d017      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a28      	ldr	r2, [pc, #160]	; (8003264 <TIM_Base_SetConfig+0x128>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a27      	ldr	r2, [pc, #156]	; (8003268 <TIM_Base_SetConfig+0x12c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00f      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a26      	ldr	r2, [pc, #152]	; (800326c <TIM_Base_SetConfig+0x130>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00b      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a25      	ldr	r2, [pc, #148]	; (8003270 <TIM_Base_SetConfig+0x134>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a24      	ldr	r2, [pc, #144]	; (8003274 <TIM_Base_SetConfig+0x138>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d003      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a23      	ldr	r2, [pc, #140]	; (8003278 <TIM_Base_SetConfig+0x13c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d108      	bne.n	8003200 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <TIM_Base_SetConfig+0x114>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_Base_SetConfig+0xf8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a0c      	ldr	r2, [pc, #48]	; (8003260 <TIM_Base_SetConfig+0x124>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d103      	bne.n	800323c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	615a      	str	r2, [r3, #20]
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40010000 	.word	0x40010000
 8003254:	40000400 	.word	0x40000400
 8003258:	40000800 	.word	0x40000800
 800325c:	40000c00 	.word	0x40000c00
 8003260:	40010400 	.word	0x40010400
 8003264:	40014000 	.word	0x40014000
 8003268:	40014400 	.word	0x40014400
 800326c:	40014800 	.word	0x40014800
 8003270:	40001800 	.word	0x40001800
 8003274:	40001c00 	.word	0x40001c00
 8003278:	40002000 	.word	0x40002000

0800327c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e040      	b.n	800334c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fe f876 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2224      	movs	r2, #36	; 0x24
 80032e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0201 	bic.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f8b0 	bl	800345c <UART_SetConfig>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e022      	b.n	800334c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fb08 	bl	8003924 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003322:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003332:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fb8f 	bl	8003a68 <UART_CheckIdleState>
 800334a:	4603      	mov	r3, r0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08a      	sub	sp, #40	; 0x28
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003368:	2b20      	cmp	r3, #32
 800336a:	d171      	bne.n	8003450 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <HAL_UART_Transmit+0x24>
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e06a      	b.n	8003452 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2221      	movs	r2, #33	; 0x21
 8003388:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800338a:	f7fe f8eb 	bl	8001564 <HAL_GetTick>
 800338e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	88fa      	ldrh	r2, [r7, #6]
 8003394:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	88fa      	ldrh	r2, [r7, #6]
 800339c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a8:	d108      	bne.n	80033bc <HAL_UART_Transmit+0x68>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d104      	bne.n	80033bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	e003      	b.n	80033c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033c4:	e02c      	b.n	8003420 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2200      	movs	r2, #0
 80033ce:	2180      	movs	r1, #128	; 0x80
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 fb80 	bl	8003ad6 <UART_WaitOnFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e038      	b.n	8003452 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10b      	bne.n	80033fe <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	3302      	adds	r3, #2
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	e007      	b.n	800340e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	3301      	adds	r3, #1
 800340c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1cc      	bne.n	80033c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2200      	movs	r2, #0
 8003434:	2140      	movs	r1, #64	; 0x40
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 fb4d 	bl	8003ad6 <UART_WaitOnFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e005      	b.n	8003452 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	e000      	b.n	8003452 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003450:	2302      	movs	r3, #2
  }
}
 8003452:	4618      	mov	r0, r3
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4ba6      	ldr	r3, [pc, #664]	; (8003720 <UART_SetConfig+0x2c4>)
 8003488:	4013      	ands	r3, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	6979      	ldr	r1, [r7, #20]
 8003490:	430b      	orrs	r3, r1
 8003492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a94      	ldr	r2, [pc, #592]	; (8003724 <UART_SetConfig+0x2c8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d120      	bne.n	800351a <UART_SetConfig+0xbe>
 80034d8:	4b93      	ldr	r3, [pc, #588]	; (8003728 <UART_SetConfig+0x2cc>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d816      	bhi.n	8003514 <UART_SetConfig+0xb8>
 80034e6:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <UART_SetConfig+0x90>)
 80034e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ec:	080034fd 	.word	0x080034fd
 80034f0:	08003509 	.word	0x08003509
 80034f4:	08003503 	.word	0x08003503
 80034f8:	0800350f 	.word	0x0800350f
 80034fc:	2301      	movs	r3, #1
 80034fe:	77fb      	strb	r3, [r7, #31]
 8003500:	e150      	b.n	80037a4 <UART_SetConfig+0x348>
 8003502:	2302      	movs	r3, #2
 8003504:	77fb      	strb	r3, [r7, #31]
 8003506:	e14d      	b.n	80037a4 <UART_SetConfig+0x348>
 8003508:	2304      	movs	r3, #4
 800350a:	77fb      	strb	r3, [r7, #31]
 800350c:	e14a      	b.n	80037a4 <UART_SetConfig+0x348>
 800350e:	2308      	movs	r3, #8
 8003510:	77fb      	strb	r3, [r7, #31]
 8003512:	e147      	b.n	80037a4 <UART_SetConfig+0x348>
 8003514:	2310      	movs	r3, #16
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e144      	b.n	80037a4 <UART_SetConfig+0x348>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a83      	ldr	r2, [pc, #524]	; (800372c <UART_SetConfig+0x2d0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d132      	bne.n	800358a <UART_SetConfig+0x12e>
 8003524:	4b80      	ldr	r3, [pc, #512]	; (8003728 <UART_SetConfig+0x2cc>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b0c      	cmp	r3, #12
 8003530:	d828      	bhi.n	8003584 <UART_SetConfig+0x128>
 8003532:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <UART_SetConfig+0xdc>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	0800356d 	.word	0x0800356d
 800353c:	08003585 	.word	0x08003585
 8003540:	08003585 	.word	0x08003585
 8003544:	08003585 	.word	0x08003585
 8003548:	08003579 	.word	0x08003579
 800354c:	08003585 	.word	0x08003585
 8003550:	08003585 	.word	0x08003585
 8003554:	08003585 	.word	0x08003585
 8003558:	08003573 	.word	0x08003573
 800355c:	08003585 	.word	0x08003585
 8003560:	08003585 	.word	0x08003585
 8003564:	08003585 	.word	0x08003585
 8003568:	0800357f 	.word	0x0800357f
 800356c:	2300      	movs	r3, #0
 800356e:	77fb      	strb	r3, [r7, #31]
 8003570:	e118      	b.n	80037a4 <UART_SetConfig+0x348>
 8003572:	2302      	movs	r3, #2
 8003574:	77fb      	strb	r3, [r7, #31]
 8003576:	e115      	b.n	80037a4 <UART_SetConfig+0x348>
 8003578:	2304      	movs	r3, #4
 800357a:	77fb      	strb	r3, [r7, #31]
 800357c:	e112      	b.n	80037a4 <UART_SetConfig+0x348>
 800357e:	2308      	movs	r3, #8
 8003580:	77fb      	strb	r3, [r7, #31]
 8003582:	e10f      	b.n	80037a4 <UART_SetConfig+0x348>
 8003584:	2310      	movs	r3, #16
 8003586:	77fb      	strb	r3, [r7, #31]
 8003588:	e10c      	b.n	80037a4 <UART_SetConfig+0x348>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a68      	ldr	r2, [pc, #416]	; (8003730 <UART_SetConfig+0x2d4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d120      	bne.n	80035d6 <UART_SetConfig+0x17a>
 8003594:	4b64      	ldr	r3, [pc, #400]	; (8003728 <UART_SetConfig+0x2cc>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800359e:	2b30      	cmp	r3, #48	; 0x30
 80035a0:	d013      	beq.n	80035ca <UART_SetConfig+0x16e>
 80035a2:	2b30      	cmp	r3, #48	; 0x30
 80035a4:	d814      	bhi.n	80035d0 <UART_SetConfig+0x174>
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d009      	beq.n	80035be <UART_SetConfig+0x162>
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d810      	bhi.n	80035d0 <UART_SetConfig+0x174>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <UART_SetConfig+0x15c>
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d006      	beq.n	80035c4 <UART_SetConfig+0x168>
 80035b6:	e00b      	b.n	80035d0 <UART_SetConfig+0x174>
 80035b8:	2300      	movs	r3, #0
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e0f2      	b.n	80037a4 <UART_SetConfig+0x348>
 80035be:	2302      	movs	r3, #2
 80035c0:	77fb      	strb	r3, [r7, #31]
 80035c2:	e0ef      	b.n	80037a4 <UART_SetConfig+0x348>
 80035c4:	2304      	movs	r3, #4
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e0ec      	b.n	80037a4 <UART_SetConfig+0x348>
 80035ca:	2308      	movs	r3, #8
 80035cc:	77fb      	strb	r3, [r7, #31]
 80035ce:	e0e9      	b.n	80037a4 <UART_SetConfig+0x348>
 80035d0:	2310      	movs	r3, #16
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	e0e6      	b.n	80037a4 <UART_SetConfig+0x348>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a56      	ldr	r2, [pc, #344]	; (8003734 <UART_SetConfig+0x2d8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d120      	bne.n	8003622 <UART_SetConfig+0x1c6>
 80035e0:	4b51      	ldr	r3, [pc, #324]	; (8003728 <UART_SetConfig+0x2cc>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035ea:	2bc0      	cmp	r3, #192	; 0xc0
 80035ec:	d013      	beq.n	8003616 <UART_SetConfig+0x1ba>
 80035ee:	2bc0      	cmp	r3, #192	; 0xc0
 80035f0:	d814      	bhi.n	800361c <UART_SetConfig+0x1c0>
 80035f2:	2b80      	cmp	r3, #128	; 0x80
 80035f4:	d009      	beq.n	800360a <UART_SetConfig+0x1ae>
 80035f6:	2b80      	cmp	r3, #128	; 0x80
 80035f8:	d810      	bhi.n	800361c <UART_SetConfig+0x1c0>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <UART_SetConfig+0x1a8>
 80035fe:	2b40      	cmp	r3, #64	; 0x40
 8003600:	d006      	beq.n	8003610 <UART_SetConfig+0x1b4>
 8003602:	e00b      	b.n	800361c <UART_SetConfig+0x1c0>
 8003604:	2300      	movs	r3, #0
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	e0cc      	b.n	80037a4 <UART_SetConfig+0x348>
 800360a:	2302      	movs	r3, #2
 800360c:	77fb      	strb	r3, [r7, #31]
 800360e:	e0c9      	b.n	80037a4 <UART_SetConfig+0x348>
 8003610:	2304      	movs	r3, #4
 8003612:	77fb      	strb	r3, [r7, #31]
 8003614:	e0c6      	b.n	80037a4 <UART_SetConfig+0x348>
 8003616:	2308      	movs	r3, #8
 8003618:	77fb      	strb	r3, [r7, #31]
 800361a:	e0c3      	b.n	80037a4 <UART_SetConfig+0x348>
 800361c:	2310      	movs	r3, #16
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e0c0      	b.n	80037a4 <UART_SetConfig+0x348>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a44      	ldr	r2, [pc, #272]	; (8003738 <UART_SetConfig+0x2dc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d125      	bne.n	8003678 <UART_SetConfig+0x21c>
 800362c:	4b3e      	ldr	r3, [pc, #248]	; (8003728 <UART_SetConfig+0x2cc>)
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800363a:	d017      	beq.n	800366c <UART_SetConfig+0x210>
 800363c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003640:	d817      	bhi.n	8003672 <UART_SetConfig+0x216>
 8003642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003646:	d00b      	beq.n	8003660 <UART_SetConfig+0x204>
 8003648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800364c:	d811      	bhi.n	8003672 <UART_SetConfig+0x216>
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <UART_SetConfig+0x1fe>
 8003652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003656:	d006      	beq.n	8003666 <UART_SetConfig+0x20a>
 8003658:	e00b      	b.n	8003672 <UART_SetConfig+0x216>
 800365a:	2300      	movs	r3, #0
 800365c:	77fb      	strb	r3, [r7, #31]
 800365e:	e0a1      	b.n	80037a4 <UART_SetConfig+0x348>
 8003660:	2302      	movs	r3, #2
 8003662:	77fb      	strb	r3, [r7, #31]
 8003664:	e09e      	b.n	80037a4 <UART_SetConfig+0x348>
 8003666:	2304      	movs	r3, #4
 8003668:	77fb      	strb	r3, [r7, #31]
 800366a:	e09b      	b.n	80037a4 <UART_SetConfig+0x348>
 800366c:	2308      	movs	r3, #8
 800366e:	77fb      	strb	r3, [r7, #31]
 8003670:	e098      	b.n	80037a4 <UART_SetConfig+0x348>
 8003672:	2310      	movs	r3, #16
 8003674:	77fb      	strb	r3, [r7, #31]
 8003676:	e095      	b.n	80037a4 <UART_SetConfig+0x348>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a2f      	ldr	r2, [pc, #188]	; (800373c <UART_SetConfig+0x2e0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d125      	bne.n	80036ce <UART_SetConfig+0x272>
 8003682:	4b29      	ldr	r3, [pc, #164]	; (8003728 <UART_SetConfig+0x2cc>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800368c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003690:	d017      	beq.n	80036c2 <UART_SetConfig+0x266>
 8003692:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003696:	d817      	bhi.n	80036c8 <UART_SetConfig+0x26c>
 8003698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800369c:	d00b      	beq.n	80036b6 <UART_SetConfig+0x25a>
 800369e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a2:	d811      	bhi.n	80036c8 <UART_SetConfig+0x26c>
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <UART_SetConfig+0x254>
 80036a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ac:	d006      	beq.n	80036bc <UART_SetConfig+0x260>
 80036ae:	e00b      	b.n	80036c8 <UART_SetConfig+0x26c>
 80036b0:	2301      	movs	r3, #1
 80036b2:	77fb      	strb	r3, [r7, #31]
 80036b4:	e076      	b.n	80037a4 <UART_SetConfig+0x348>
 80036b6:	2302      	movs	r3, #2
 80036b8:	77fb      	strb	r3, [r7, #31]
 80036ba:	e073      	b.n	80037a4 <UART_SetConfig+0x348>
 80036bc:	2304      	movs	r3, #4
 80036be:	77fb      	strb	r3, [r7, #31]
 80036c0:	e070      	b.n	80037a4 <UART_SetConfig+0x348>
 80036c2:	2308      	movs	r3, #8
 80036c4:	77fb      	strb	r3, [r7, #31]
 80036c6:	e06d      	b.n	80037a4 <UART_SetConfig+0x348>
 80036c8:	2310      	movs	r3, #16
 80036ca:	77fb      	strb	r3, [r7, #31]
 80036cc:	e06a      	b.n	80037a4 <UART_SetConfig+0x348>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1b      	ldr	r2, [pc, #108]	; (8003740 <UART_SetConfig+0x2e4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d138      	bne.n	800374a <UART_SetConfig+0x2ee>
 80036d8:	4b13      	ldr	r3, [pc, #76]	; (8003728 <UART_SetConfig+0x2cc>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80036e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036e6:	d017      	beq.n	8003718 <UART_SetConfig+0x2bc>
 80036e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036ec:	d82a      	bhi.n	8003744 <UART_SetConfig+0x2e8>
 80036ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f2:	d00b      	beq.n	800370c <UART_SetConfig+0x2b0>
 80036f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f8:	d824      	bhi.n	8003744 <UART_SetConfig+0x2e8>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <UART_SetConfig+0x2aa>
 80036fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003702:	d006      	beq.n	8003712 <UART_SetConfig+0x2b6>
 8003704:	e01e      	b.n	8003744 <UART_SetConfig+0x2e8>
 8003706:	2300      	movs	r3, #0
 8003708:	77fb      	strb	r3, [r7, #31]
 800370a:	e04b      	b.n	80037a4 <UART_SetConfig+0x348>
 800370c:	2302      	movs	r3, #2
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e048      	b.n	80037a4 <UART_SetConfig+0x348>
 8003712:	2304      	movs	r3, #4
 8003714:	77fb      	strb	r3, [r7, #31]
 8003716:	e045      	b.n	80037a4 <UART_SetConfig+0x348>
 8003718:	2308      	movs	r3, #8
 800371a:	77fb      	strb	r3, [r7, #31]
 800371c:	e042      	b.n	80037a4 <UART_SetConfig+0x348>
 800371e:	bf00      	nop
 8003720:	efff69f3 	.word	0xefff69f3
 8003724:	40011000 	.word	0x40011000
 8003728:	40023800 	.word	0x40023800
 800372c:	40004400 	.word	0x40004400
 8003730:	40004800 	.word	0x40004800
 8003734:	40004c00 	.word	0x40004c00
 8003738:	40005000 	.word	0x40005000
 800373c:	40011400 	.word	0x40011400
 8003740:	40007800 	.word	0x40007800
 8003744:	2310      	movs	r3, #16
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	e02c      	b.n	80037a4 <UART_SetConfig+0x348>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a72      	ldr	r2, [pc, #456]	; (8003918 <UART_SetConfig+0x4bc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d125      	bne.n	80037a0 <UART_SetConfig+0x344>
 8003754:	4b71      	ldr	r3, [pc, #452]	; (800391c <UART_SetConfig+0x4c0>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800375e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003762:	d017      	beq.n	8003794 <UART_SetConfig+0x338>
 8003764:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003768:	d817      	bhi.n	800379a <UART_SetConfig+0x33e>
 800376a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800376e:	d00b      	beq.n	8003788 <UART_SetConfig+0x32c>
 8003770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003774:	d811      	bhi.n	800379a <UART_SetConfig+0x33e>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <UART_SetConfig+0x326>
 800377a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800377e:	d006      	beq.n	800378e <UART_SetConfig+0x332>
 8003780:	e00b      	b.n	800379a <UART_SetConfig+0x33e>
 8003782:	2300      	movs	r3, #0
 8003784:	77fb      	strb	r3, [r7, #31]
 8003786:	e00d      	b.n	80037a4 <UART_SetConfig+0x348>
 8003788:	2302      	movs	r3, #2
 800378a:	77fb      	strb	r3, [r7, #31]
 800378c:	e00a      	b.n	80037a4 <UART_SetConfig+0x348>
 800378e:	2304      	movs	r3, #4
 8003790:	77fb      	strb	r3, [r7, #31]
 8003792:	e007      	b.n	80037a4 <UART_SetConfig+0x348>
 8003794:	2308      	movs	r3, #8
 8003796:	77fb      	strb	r3, [r7, #31]
 8003798:	e004      	b.n	80037a4 <UART_SetConfig+0x348>
 800379a:	2310      	movs	r3, #16
 800379c:	77fb      	strb	r3, [r7, #31]
 800379e:	e001      	b.n	80037a4 <UART_SetConfig+0x348>
 80037a0:	2310      	movs	r3, #16
 80037a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ac:	d15b      	bne.n	8003866 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80037ae:	7ffb      	ldrb	r3, [r7, #31]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d828      	bhi.n	8003806 <UART_SetConfig+0x3aa>
 80037b4:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <UART_SetConfig+0x360>)
 80037b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ba:	bf00      	nop
 80037bc:	080037e1 	.word	0x080037e1
 80037c0:	080037e9 	.word	0x080037e9
 80037c4:	080037f1 	.word	0x080037f1
 80037c8:	08003807 	.word	0x08003807
 80037cc:	080037f7 	.word	0x080037f7
 80037d0:	08003807 	.word	0x08003807
 80037d4:	08003807 	.word	0x08003807
 80037d8:	08003807 	.word	0x08003807
 80037dc:	080037ff 	.word	0x080037ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e0:	f7fe fe40 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 80037e4:	61b8      	str	r0, [r7, #24]
        break;
 80037e6:	e013      	b.n	8003810 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037e8:	f7fe fe50 	bl	800248c <HAL_RCC_GetPCLK2Freq>
 80037ec:	61b8      	str	r0, [r7, #24]
        break;
 80037ee:	e00f      	b.n	8003810 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f0:	4b4b      	ldr	r3, [pc, #300]	; (8003920 <UART_SetConfig+0x4c4>)
 80037f2:	61bb      	str	r3, [r7, #24]
        break;
 80037f4:	e00c      	b.n	8003810 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037f6:	f7fe fd63 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 80037fa:	61b8      	str	r0, [r7, #24]
        break;
 80037fc:	e008      	b.n	8003810 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003802:	61bb      	str	r3, [r7, #24]
        break;
 8003804:	e004      	b.n	8003810 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	77bb      	strb	r3, [r7, #30]
        break;
 800380e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d074      	beq.n	8003900 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	005a      	lsls	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	085b      	lsrs	r3, r3, #1
 8003820:	441a      	add	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	2b0f      	cmp	r3, #15
 8003830:	d916      	bls.n	8003860 <UART_SetConfig+0x404>
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003838:	d212      	bcs.n	8003860 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	b29b      	uxth	r3, r3
 800383e:	f023 030f 	bic.w	r3, r3, #15
 8003842:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	b29b      	uxth	r3, r3
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	b29a      	uxth	r2, r3
 8003850:	89fb      	ldrh	r3, [r7, #14]
 8003852:	4313      	orrs	r3, r2
 8003854:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	89fa      	ldrh	r2, [r7, #14]
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	e04f      	b.n	8003900 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	77bb      	strb	r3, [r7, #30]
 8003864:	e04c      	b.n	8003900 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003866:	7ffb      	ldrb	r3, [r7, #31]
 8003868:	2b08      	cmp	r3, #8
 800386a:	d828      	bhi.n	80038be <UART_SetConfig+0x462>
 800386c:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <UART_SetConfig+0x418>)
 800386e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003872:	bf00      	nop
 8003874:	08003899 	.word	0x08003899
 8003878:	080038a1 	.word	0x080038a1
 800387c:	080038a9 	.word	0x080038a9
 8003880:	080038bf 	.word	0x080038bf
 8003884:	080038af 	.word	0x080038af
 8003888:	080038bf 	.word	0x080038bf
 800388c:	080038bf 	.word	0x080038bf
 8003890:	080038bf 	.word	0x080038bf
 8003894:	080038b7 	.word	0x080038b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003898:	f7fe fde4 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 800389c:	61b8      	str	r0, [r7, #24]
        break;
 800389e:	e013      	b.n	80038c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038a0:	f7fe fdf4 	bl	800248c <HAL_RCC_GetPCLK2Freq>
 80038a4:	61b8      	str	r0, [r7, #24]
        break;
 80038a6:	e00f      	b.n	80038c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038a8:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <UART_SetConfig+0x4c4>)
 80038aa:	61bb      	str	r3, [r7, #24]
        break;
 80038ac:	e00c      	b.n	80038c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ae:	f7fe fd07 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 80038b2:	61b8      	str	r0, [r7, #24]
        break;
 80038b4:	e008      	b.n	80038c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ba:	61bb      	str	r3, [r7, #24]
        break;
 80038bc:	e004      	b.n	80038c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	77bb      	strb	r3, [r7, #30]
        break;
 80038c6:	bf00      	nop
    }

    if (pclk != 0U)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d018      	beq.n	8003900 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	085a      	lsrs	r2, r3, #1
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	441a      	add	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	2b0f      	cmp	r3, #15
 80038e6:	d909      	bls.n	80038fc <UART_SetConfig+0x4a0>
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ee:	d205      	bcs.n	80038fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60da      	str	r2, [r3, #12]
 80038fa:	e001      	b.n	8003900 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800390c:	7fbb      	ldrb	r3, [r7, #30]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3720      	adds	r7, #32
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40007c00 	.word	0x40007c00
 800391c:	40023800 	.word	0x40023800
 8003920:	00f42400 	.word	0x00f42400

08003924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01a      	beq.n	8003a3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a22:	d10a      	bne.n	8003a3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	605a      	str	r2, [r3, #4]
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a78:	f7fd fd74 	bl	8001564 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d10e      	bne.n	8003aaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f81b 	bl	8003ad6 <UART_WaitOnFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e011      	b.n	8003ace <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2220      	movs	r2, #32
 8003aae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b09c      	sub	sp, #112	; 0x70
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	60f8      	str	r0, [r7, #12]
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	603b      	str	r3, [r7, #0]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae6:	e0a7      	b.n	8003c38 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	f000 80a3 	beq.w	8003c38 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af2:	f7fd fd37 	bl	8001564 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d302      	bcc.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d13f      	bne.n	8003b88 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b1c:	667b      	str	r3, [r7, #100]	; 0x64
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e6      	bne.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3308      	adds	r3, #8
 8003b40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4c:	f023 0301 	bic.w	r3, r3, #1
 8003b50:	663b      	str	r3, [r7, #96]	; 0x60
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3308      	adds	r3, #8
 8003b58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b62:	e841 2300 	strex	r3, r2, [r1]
 8003b66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1e5      	bne.n	8003b3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2220      	movs	r2, #32
 8003b72:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e068      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d050      	beq.n	8003c38 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba4:	d148      	bne.n	8003c38 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bce:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e6      	bne.n	8003bb0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3308      	adds	r3, #8
 8003be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f023 0301 	bic.w	r3, r3, #1
 8003bf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3308      	adds	r3, #8
 8003c00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c02:	623a      	str	r2, [r7, #32]
 8003c04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	69f9      	ldr	r1, [r7, #28]
 8003c08:	6a3a      	ldr	r2, [r7, #32]
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e5      	bne.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e010      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	69da      	ldr	r2, [r3, #28]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	4013      	ands	r3, r2
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	bf0c      	ite	eq
 8003c48:	2301      	moveq	r3, #1
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	461a      	mov	r2, r3
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	f43f af48 	beq.w	8003ae8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3770      	adds	r7, #112	; 0x70
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b085      	sub	sp, #20
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	4603      	mov	r3, r0
 8003c6a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003c70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c74:	2b84      	cmp	r3, #132	; 0x84
 8003c76:	d005      	beq.n	8003c84 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4413      	add	r3, r2
 8003c80:	3303      	adds	r3, #3
 8003c82:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c84:	68fb      	ldr	r3, [r7, #12]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c96:	f000 fae9 	bl	800426c <vTaskStartScheduler>
  
  return osOK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca2:	b089      	sub	sp, #36	; 0x24
 8003ca4:	af04      	add	r7, sp, #16
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d020      	beq.n	8003cf4 <osThreadCreate+0x54>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d01c      	beq.n	8003cf4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685c      	ldr	r4, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691e      	ldr	r6, [r3, #16]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff ffc8 	bl	8003c62 <makeFreeRtosPriority>
 8003cd2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cdc:	9202      	str	r2, [sp, #8]
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	9100      	str	r1, [sp, #0]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	4632      	mov	r2, r6
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	4620      	mov	r0, r4
 8003cea:	f000 f8ed 	bl	8003ec8 <xTaskCreateStatic>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	e01c      	b.n	8003d2e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685c      	ldr	r4, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d00:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff ffaa 	bl	8003c62 <makeFreeRtosPriority>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	f107 030c 	add.w	r3, r7, #12
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	9200      	str	r2, [sp, #0]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	4632      	mov	r2, r6
 8003d1c:	4629      	mov	r1, r5
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f000 f935 	bl	8003f8e <xTaskCreate>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d001      	beq.n	8003d2e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e000      	b.n	8003d30 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d38 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <osDelay+0x16>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	e000      	b.n	8003d50 <osDelay+0x18>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fa55 	bl	8004200 <vTaskDelay>
  
  return osOK;
 8003d56:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f103 0208 	add.w	r2, r3, #8
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f04f 32ff 	mov.w	r2, #4294967295
 8003d78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f103 0208 	add.w	r2, r3, #8
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f103 0208 	add.w	r2, r3, #8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	601a      	str	r2, [r3, #0]
}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e02:	b480      	push	{r7}
 8003e04:	b085      	sub	sp, #20
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e18:	d103      	bne.n	8003e22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	e00c      	b.n	8003e3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3308      	adds	r3, #8
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e002      	b.n	8003e30 <vListInsert+0x2e>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d2f6      	bcs.n	8003e2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	601a      	str	r2, [r3, #0]
}
 8003e68:	bf00      	nop
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6892      	ldr	r2, [r2, #8]
 8003e8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6852      	ldr	r2, [r2, #4]
 8003e94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d103      	bne.n	8003ea8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	1e5a      	subs	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08e      	sub	sp, #56	; 0x38
 8003ecc:	af04      	add	r7, sp, #16
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10c      	bne.n	8003ef6 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	b672      	cpsid	i
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	b662      	cpsie	i
 8003ef0:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ef2:	bf00      	nop
 8003ef4:	e7fe      	b.n	8003ef4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10c      	bne.n	8003f16 <xTaskCreateStatic+0x4e>
	__asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	b672      	cpsid	i
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	b662      	cpsie	i
 8003f10:	61fb      	str	r3, [r7, #28]
}
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f16:	2354      	movs	r3, #84	; 0x54
 8003f18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b54      	cmp	r3, #84	; 0x54
 8003f1e:	d00c      	beq.n	8003f3a <xTaskCreateStatic+0x72>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	b672      	cpsid	i
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	b662      	cpsie	i
 8003f34:	61bb      	str	r3, [r7, #24]
}
 8003f36:	bf00      	nop
 8003f38:	e7fe      	b.n	8003f38 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01e      	beq.n	8003f80 <xTaskCreateStatic+0xb8>
 8003f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01b      	beq.n	8003f80 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	2202      	movs	r2, #2
 8003f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	9303      	str	r3, [sp, #12]
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	9302      	str	r3, [sp, #8]
 8003f62:	f107 0314 	add.w	r3, r7, #20
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f850 	bl	8004018 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f7a:	f000 f8d7 	bl	800412c <prvAddNewTaskToReadyList>
 8003f7e:	e001      	b.n	8003f84 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f84:	697b      	ldr	r3, [r7, #20]
	}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3728      	adds	r7, #40	; 0x28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b08c      	sub	sp, #48	; 0x30
 8003f92:	af04      	add	r7, sp, #16
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	603b      	str	r3, [r7, #0]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 feba 	bl	8004d1c <pvPortMalloc>
 8003fa8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00e      	beq.n	8003fce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fb0:	2054      	movs	r0, #84	; 0x54
 8003fb2:	f000 feb3 	bl	8004d1c <pvPortMalloc>
 8003fb6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8003fc4:	e005      	b.n	8003fd2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fc6:	6978      	ldr	r0, [r7, #20]
 8003fc8:	f000 ff72 	bl	8004eb0 <vPortFree>
 8003fcc:	e001      	b.n	8003fd2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d017      	beq.n	8004008 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fe0:	88fa      	ldrh	r2, [r7, #6]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	9303      	str	r3, [sp, #12]
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	9302      	str	r3, [sp, #8]
 8003fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fec:	9301      	str	r3, [sp, #4]
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f80e 	bl	8004018 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ffc:	69f8      	ldr	r0, [r7, #28]
 8003ffe:	f000 f895 	bl	800412c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004002:	2301      	movs	r3, #1
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	e002      	b.n	800400e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004008:	f04f 33ff 	mov.w	r3, #4294967295
 800400c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800400e:	69bb      	ldr	r3, [r7, #24]
	}
 8004010:	4618      	mov	r0, r3
 8004012:	3720      	adds	r7, #32
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004030:	440b      	add	r3, r1
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	f023 0307 	bic.w	r3, r3, #7
 800403e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00c      	beq.n	8004064 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404e:	b672      	cpsid	i
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	b662      	cpsie	i
 800405e:	617b      	str	r3, [r7, #20]
}
 8004060:	bf00      	nop
 8004062:	e7fe      	b.n	8004062 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01f      	beq.n	80040aa <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
 800406e:	e012      	b.n	8004096 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	4413      	add	r3, r2
 8004076:	7819      	ldrb	r1, [r3, #0]
 8004078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	4413      	add	r3, r2
 800407e:	3334      	adds	r3, #52	; 0x34
 8004080:	460a      	mov	r2, r1
 8004082:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	4413      	add	r3, r2
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d006      	beq.n	800409e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	3301      	adds	r3, #1
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	2b0f      	cmp	r3, #15
 800409a:	d9e9      	bls.n	8004070 <prvInitialiseNewTask+0x58>
 800409c:	e000      	b.n	80040a0 <prvInitialiseNewTask+0x88>
			{
				break;
 800409e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040a8:	e003      	b.n	80040b2 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b4:	2b06      	cmp	r3, #6
 80040b6:	d901      	bls.n	80040bc <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040b8:	2306      	movs	r3, #6
 80040ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	2200      	movs	r2, #0
 80040cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	3304      	adds	r3, #4
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff fe64 	bl	8003da0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	3318      	adds	r3, #24
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff fe5f 	bl	8003da0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	f1c3 0207 	rsb	r2, r3, #7
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fa:	2200      	movs	r2, #0
 80040fc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	68f9      	ldr	r1, [r7, #12]
 800410a:	69b8      	ldr	r0, [r7, #24]
 800410c:	f000 fc14 	bl	8004938 <pxPortInitialiseStack>
 8004110:	4602      	mov	r2, r0
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800411c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004120:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004122:	bf00      	nop
 8004124:	3720      	adds	r7, #32
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004134:	f000 fd0a 	bl	8004b4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004138:	4b2a      	ldr	r3, [pc, #168]	; (80041e4 <prvAddNewTaskToReadyList+0xb8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3301      	adds	r3, #1
 800413e:	4a29      	ldr	r2, [pc, #164]	; (80041e4 <prvAddNewTaskToReadyList+0xb8>)
 8004140:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004142:	4b29      	ldr	r3, [pc, #164]	; (80041e8 <prvAddNewTaskToReadyList+0xbc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800414a:	4a27      	ldr	r2, [pc, #156]	; (80041e8 <prvAddNewTaskToReadyList+0xbc>)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004150:	4b24      	ldr	r3, [pc, #144]	; (80041e4 <prvAddNewTaskToReadyList+0xb8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d110      	bne.n	800417a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004158:	f000 fac8 	bl	80046ec <prvInitialiseTaskLists>
 800415c:	e00d      	b.n	800417a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800415e:	4b23      	ldr	r3, [pc, #140]	; (80041ec <prvAddNewTaskToReadyList+0xc0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004166:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <prvAddNewTaskToReadyList+0xbc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	429a      	cmp	r2, r3
 8004172:	d802      	bhi.n	800417a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004174:	4a1c      	ldr	r2, [pc, #112]	; (80041e8 <prvAddNewTaskToReadyList+0xbc>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800417a:	4b1d      	ldr	r3, [pc, #116]	; (80041f0 <prvAddNewTaskToReadyList+0xc4>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3301      	adds	r3, #1
 8004180:	4a1b      	ldr	r2, [pc, #108]	; (80041f0 <prvAddNewTaskToReadyList+0xc4>)
 8004182:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	2201      	movs	r2, #1
 800418a:	409a      	lsls	r2, r3
 800418c:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <prvAddNewTaskToReadyList+0xc8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4313      	orrs	r3, r2
 8004192:	4a18      	ldr	r2, [pc, #96]	; (80041f4 <prvAddNewTaskToReadyList+0xc8>)
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4a15      	ldr	r2, [pc, #84]	; (80041f8 <prvAddNewTaskToReadyList+0xcc>)
 80041a4:	441a      	add	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3304      	adds	r3, #4
 80041aa:	4619      	mov	r1, r3
 80041ac:	4610      	mov	r0, r2
 80041ae:	f7ff fe04 	bl	8003dba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041b2:	f000 fcff 	bl	8004bb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041b6:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <prvAddNewTaskToReadyList+0xc0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00e      	beq.n	80041dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041be:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <prvAddNewTaskToReadyList+0xbc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d207      	bcs.n	80041dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <prvAddNewTaskToReadyList+0xd0>)
 80041ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	200004c8 	.word	0x200004c8
 80041e8:	200003c8 	.word	0x200003c8
 80041ec:	200004d4 	.word	0x200004d4
 80041f0:	200004e4 	.word	0x200004e4
 80041f4:	200004d0 	.word	0x200004d0
 80041f8:	200003cc 	.word	0x200003cc
 80041fc:	e000ed04 	.word	0xe000ed04

08004200 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d019      	beq.n	8004246 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004212:	4b14      	ldr	r3, [pc, #80]	; (8004264 <vTaskDelay+0x64>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00c      	beq.n	8004234 <vTaskDelay+0x34>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	b672      	cpsid	i
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	b662      	cpsie	i
 800422e:	60bb      	str	r3, [r7, #8]
}
 8004230:	bf00      	nop
 8004232:	e7fe      	b.n	8004232 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004234:	f000 f87e 	bl	8004334 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004238:	2100      	movs	r1, #0
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fb16 	bl	800486c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004240:	f000 f886 	bl	8004350 <xTaskResumeAll>
 8004244:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d107      	bne.n	800425c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <vTaskDelay+0x68>)
 800424e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	200004f0 	.word	0x200004f0
 8004268:	e000ed04 	.word	0xe000ed04

0800426c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	; 0x28
 8004270:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004272:	2300      	movs	r3, #0
 8004274:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004276:	2300      	movs	r3, #0
 8004278:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800427a:	463a      	mov	r2, r7
 800427c:	1d39      	adds	r1, r7, #4
 800427e:	f107 0308 	add.w	r3, r7, #8
 8004282:	4618      	mov	r0, r3
 8004284:	f7fc f942 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004288:	6839      	ldr	r1, [r7, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	9202      	str	r2, [sp, #8]
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	2300      	movs	r3, #0
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	2300      	movs	r3, #0
 8004298:	460a      	mov	r2, r1
 800429a:	4920      	ldr	r1, [pc, #128]	; (800431c <vTaskStartScheduler+0xb0>)
 800429c:	4820      	ldr	r0, [pc, #128]	; (8004320 <vTaskStartScheduler+0xb4>)
 800429e:	f7ff fe13 	bl	8003ec8 <xTaskCreateStatic>
 80042a2:	4603      	mov	r3, r0
 80042a4:	4a1f      	ldr	r2, [pc, #124]	; (8004324 <vTaskStartScheduler+0xb8>)
 80042a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042a8:	4b1e      	ldr	r3, [pc, #120]	; (8004324 <vTaskStartScheduler+0xb8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042b0:	2301      	movs	r3, #1
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	e001      	b.n	80042ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d118      	bne.n	80042f2 <vTaskStartScheduler+0x86>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	b672      	cpsid	i
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	b662      	cpsie	i
 80042d4:	613b      	str	r3, [r7, #16]
}
 80042d6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042d8:	4b13      	ldr	r3, [pc, #76]	; (8004328 <vTaskStartScheduler+0xbc>)
 80042da:	f04f 32ff 	mov.w	r2, #4294967295
 80042de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042e0:	4b12      	ldr	r3, [pc, #72]	; (800432c <vTaskStartScheduler+0xc0>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042e6:	4b12      	ldr	r3, [pc, #72]	; (8004330 <vTaskStartScheduler+0xc4>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042ec:	f000 fbb0 	bl	8004a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042f0:	e010      	b.n	8004314 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d10c      	bne.n	8004314 <vTaskStartScheduler+0xa8>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	b672      	cpsid	i
 8004300:	f383 8811 	msr	BASEPRI, r3
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	b662      	cpsie	i
 800430e:	60fb      	str	r3, [r7, #12]
}
 8004310:	bf00      	nop
 8004312:	e7fe      	b.n	8004312 <vTaskStartScheduler+0xa6>
}
 8004314:	bf00      	nop
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	08005ab0 	.word	0x08005ab0
 8004320:	080046bd 	.word	0x080046bd
 8004324:	200004ec 	.word	0x200004ec
 8004328:	200004e8 	.word	0x200004e8
 800432c:	200004d4 	.word	0x200004d4
 8004330:	200004cc 	.word	0x200004cc

08004334 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004338:	4b04      	ldr	r3, [pc, #16]	; (800434c <vTaskSuspendAll+0x18>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3301      	adds	r3, #1
 800433e:	4a03      	ldr	r2, [pc, #12]	; (800434c <vTaskSuspendAll+0x18>)
 8004340:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004342:	bf00      	nop
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	200004f0 	.word	0x200004f0

08004350 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800435a:	2300      	movs	r3, #0
 800435c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800435e:	4b42      	ldr	r3, [pc, #264]	; (8004468 <xTaskResumeAll+0x118>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10c      	bne.n	8004380 <xTaskResumeAll+0x30>
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	b672      	cpsid	i
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	b662      	cpsie	i
 800437a:	603b      	str	r3, [r7, #0]
}
 800437c:	bf00      	nop
 800437e:	e7fe      	b.n	800437e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004380:	f000 fbe4 	bl	8004b4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004384:	4b38      	ldr	r3, [pc, #224]	; (8004468 <xTaskResumeAll+0x118>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3b01      	subs	r3, #1
 800438a:	4a37      	ldr	r2, [pc, #220]	; (8004468 <xTaskResumeAll+0x118>)
 800438c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800438e:	4b36      	ldr	r3, [pc, #216]	; (8004468 <xTaskResumeAll+0x118>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d161      	bne.n	800445a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004396:	4b35      	ldr	r3, [pc, #212]	; (800446c <xTaskResumeAll+0x11c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d05d      	beq.n	800445a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800439e:	e02e      	b.n	80043fe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043a0:	4b33      	ldr	r3, [pc, #204]	; (8004470 <xTaskResumeAll+0x120>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3318      	adds	r3, #24
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff fd61 	bl	8003e74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fd5c 	bl	8003e74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	2201      	movs	r2, #1
 80043c2:	409a      	lsls	r2, r3
 80043c4:	4b2b      	ldr	r3, [pc, #172]	; (8004474 <xTaskResumeAll+0x124>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	4a2a      	ldr	r2, [pc, #168]	; (8004474 <xTaskResumeAll+0x124>)
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d2:	4613      	mov	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4a27      	ldr	r2, [pc, #156]	; (8004478 <xTaskResumeAll+0x128>)
 80043dc:	441a      	add	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3304      	adds	r3, #4
 80043e2:	4619      	mov	r1, r3
 80043e4:	4610      	mov	r0, r2
 80043e6:	f7ff fce8 	bl	8003dba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ee:	4b23      	ldr	r3, [pc, #140]	; (800447c <xTaskResumeAll+0x12c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d302      	bcc.n	80043fe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80043f8:	4b21      	ldr	r3, [pc, #132]	; (8004480 <xTaskResumeAll+0x130>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043fe:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <xTaskResumeAll+0x120>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1cc      	bne.n	80043a0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800440c:	f000 fa0e 	bl	800482c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004410:	4b1c      	ldr	r3, [pc, #112]	; (8004484 <xTaskResumeAll+0x134>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d010      	beq.n	800443e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800441c:	f000 f836 	bl	800448c <xTaskIncrementTick>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004426:	4b16      	ldr	r3, [pc, #88]	; (8004480 <xTaskResumeAll+0x130>)
 8004428:	2201      	movs	r2, #1
 800442a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3b01      	subs	r3, #1
 8004430:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f1      	bne.n	800441c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004438:	4b12      	ldr	r3, [pc, #72]	; (8004484 <xTaskResumeAll+0x134>)
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800443e:	4b10      	ldr	r3, [pc, #64]	; (8004480 <xTaskResumeAll+0x130>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004446:	2301      	movs	r3, #1
 8004448:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800444a:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <xTaskResumeAll+0x138>)
 800444c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800445a:	f000 fbab 	bl	8004bb4 <vPortExitCritical>

	return xAlreadyYielded;
 800445e:	68bb      	ldr	r3, [r7, #8]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	200004f0 	.word	0x200004f0
 800446c:	200004c8 	.word	0x200004c8
 8004470:	20000488 	.word	0x20000488
 8004474:	200004d0 	.word	0x200004d0
 8004478:	200003cc 	.word	0x200003cc
 800447c:	200003c8 	.word	0x200003c8
 8004480:	200004dc 	.word	0x200004dc
 8004484:	200004d8 	.word	0x200004d8
 8004488:	e000ed04 	.word	0xe000ed04

0800448c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004496:	4b4f      	ldr	r3, [pc, #316]	; (80045d4 <xTaskIncrementTick+0x148>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	f040 808a 	bne.w	80045b4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044a0:	4b4d      	ldr	r3, [pc, #308]	; (80045d8 <xTaskIncrementTick+0x14c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3301      	adds	r3, #1
 80044a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044a8:	4a4b      	ldr	r2, [pc, #300]	; (80045d8 <xTaskIncrementTick+0x14c>)
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d122      	bne.n	80044fa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80044b4:	4b49      	ldr	r3, [pc, #292]	; (80045dc <xTaskIncrementTick+0x150>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00c      	beq.n	80044d8 <xTaskIncrementTick+0x4c>
	__asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c2:	b672      	cpsid	i
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	b662      	cpsie	i
 80044d2:	603b      	str	r3, [r7, #0]
}
 80044d4:	bf00      	nop
 80044d6:	e7fe      	b.n	80044d6 <xTaskIncrementTick+0x4a>
 80044d8:	4b40      	ldr	r3, [pc, #256]	; (80045dc <xTaskIncrementTick+0x150>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	4b40      	ldr	r3, [pc, #256]	; (80045e0 <xTaskIncrementTick+0x154>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a3e      	ldr	r2, [pc, #248]	; (80045dc <xTaskIncrementTick+0x150>)
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	4a3e      	ldr	r2, [pc, #248]	; (80045e0 <xTaskIncrementTick+0x154>)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	4b3d      	ldr	r3, [pc, #244]	; (80045e4 <xTaskIncrementTick+0x158>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3301      	adds	r3, #1
 80044f2:	4a3c      	ldr	r2, [pc, #240]	; (80045e4 <xTaskIncrementTick+0x158>)
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	f000 f999 	bl	800482c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044fa:	4b3b      	ldr	r3, [pc, #236]	; (80045e8 <xTaskIncrementTick+0x15c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	429a      	cmp	r2, r3
 8004502:	d348      	bcc.n	8004596 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004504:	4b35      	ldr	r3, [pc, #212]	; (80045dc <xTaskIncrementTick+0x150>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d104      	bne.n	8004518 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800450e:	4b36      	ldr	r3, [pc, #216]	; (80045e8 <xTaskIncrementTick+0x15c>)
 8004510:	f04f 32ff 	mov.w	r2, #4294967295
 8004514:	601a      	str	r2, [r3, #0]
					break;
 8004516:	e03e      	b.n	8004596 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004518:	4b30      	ldr	r3, [pc, #192]	; (80045dc <xTaskIncrementTick+0x150>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	429a      	cmp	r2, r3
 800452e:	d203      	bcs.n	8004538 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004530:	4a2d      	ldr	r2, [pc, #180]	; (80045e8 <xTaskIncrementTick+0x15c>)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004536:	e02e      	b.n	8004596 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	3304      	adds	r3, #4
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff fc99 	bl	8003e74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	2b00      	cmp	r3, #0
 8004548:	d004      	beq.n	8004554 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	3318      	adds	r3, #24
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff fc90 	bl	8003e74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	2201      	movs	r2, #1
 800455a:	409a      	lsls	r2, r3
 800455c:	4b23      	ldr	r3, [pc, #140]	; (80045ec <xTaskIncrementTick+0x160>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4313      	orrs	r3, r2
 8004562:	4a22      	ldr	r2, [pc, #136]	; (80045ec <xTaskIncrementTick+0x160>)
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4a1f      	ldr	r2, [pc, #124]	; (80045f0 <xTaskIncrementTick+0x164>)
 8004574:	441a      	add	r2, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	3304      	adds	r3, #4
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f7ff fc1c 	bl	8003dba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004586:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <xTaskIncrementTick+0x168>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	429a      	cmp	r2, r3
 800458e:	d3b9      	bcc.n	8004504 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004590:	2301      	movs	r3, #1
 8004592:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004594:	e7b6      	b.n	8004504 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004596:	4b17      	ldr	r3, [pc, #92]	; (80045f4 <xTaskIncrementTick+0x168>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459c:	4914      	ldr	r1, [pc, #80]	; (80045f0 <xTaskIncrementTick+0x164>)
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d907      	bls.n	80045be <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80045ae:	2301      	movs	r3, #1
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e004      	b.n	80045be <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80045b4:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <xTaskIncrementTick+0x16c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	4a0f      	ldr	r2, [pc, #60]	; (80045f8 <xTaskIncrementTick+0x16c>)
 80045bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80045be:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <xTaskIncrementTick+0x170>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80045c6:	2301      	movs	r3, #1
 80045c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80045ca:	697b      	ldr	r3, [r7, #20]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	200004f0 	.word	0x200004f0
 80045d8:	200004cc 	.word	0x200004cc
 80045dc:	20000480 	.word	0x20000480
 80045e0:	20000484 	.word	0x20000484
 80045e4:	200004e0 	.word	0x200004e0
 80045e8:	200004e8 	.word	0x200004e8
 80045ec:	200004d0 	.word	0x200004d0
 80045f0:	200003cc 	.word	0x200003cc
 80045f4:	200003c8 	.word	0x200003c8
 80045f8:	200004d8 	.word	0x200004d8
 80045fc:	200004dc 	.word	0x200004dc

08004600 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004606:	4b28      	ldr	r3, [pc, #160]	; (80046a8 <vTaskSwitchContext+0xa8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800460e:	4b27      	ldr	r3, [pc, #156]	; (80046ac <vTaskSwitchContext+0xac>)
 8004610:	2201      	movs	r2, #1
 8004612:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004614:	e041      	b.n	800469a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004616:	4b25      	ldr	r3, [pc, #148]	; (80046ac <vTaskSwitchContext+0xac>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800461c:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <vTaskSwitchContext+0xb0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	fab3 f383 	clz	r3, r3
 8004628:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800462a:	7afb      	ldrb	r3, [r7, #11]
 800462c:	f1c3 031f 	rsb	r3, r3, #31
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	4920      	ldr	r1, [pc, #128]	; (80046b4 <vTaskSwitchContext+0xb4>)
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10c      	bne.n	8004660 <vTaskSwitchContext+0x60>
	__asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464a:	b672      	cpsid	i
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	b662      	cpsie	i
 800465a:	607b      	str	r3, [r7, #4]
}
 800465c:	bf00      	nop
 800465e:	e7fe      	b.n	800465e <vTaskSwitchContext+0x5e>
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4a12      	ldr	r2, [pc, #72]	; (80046b4 <vTaskSwitchContext+0xb4>)
 800466c:	4413      	add	r3, r2
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	3308      	adds	r3, #8
 8004682:	429a      	cmp	r2, r3
 8004684:	d104      	bne.n	8004690 <vTaskSwitchContext+0x90>
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	605a      	str	r2, [r3, #4]
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	4a08      	ldr	r2, [pc, #32]	; (80046b8 <vTaskSwitchContext+0xb8>)
 8004698:	6013      	str	r3, [r2, #0]
}
 800469a:	bf00      	nop
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	200004f0 	.word	0x200004f0
 80046ac:	200004dc 	.word	0x200004dc
 80046b0:	200004d0 	.word	0x200004d0
 80046b4:	200003cc 	.word	0x200003cc
 80046b8:	200003c8 	.word	0x200003c8

080046bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046c4:	f000 f852 	bl	800476c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046c8:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <prvIdleTask+0x28>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d9f9      	bls.n	80046c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <prvIdleTask+0x2c>)
 80046d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046e0:	e7f0      	b.n	80046c4 <prvIdleTask+0x8>
 80046e2:	bf00      	nop
 80046e4:	200003cc 	.word	0x200003cc
 80046e8:	e000ed04 	.word	0xe000ed04

080046ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046f2:	2300      	movs	r3, #0
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	e00c      	b.n	8004712 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	4613      	mov	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4a12      	ldr	r2, [pc, #72]	; (800474c <prvInitialiseTaskLists+0x60>)
 8004704:	4413      	add	r3, r2
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fb2a 	bl	8003d60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3301      	adds	r3, #1
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b06      	cmp	r3, #6
 8004716:	d9ef      	bls.n	80046f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004718:	480d      	ldr	r0, [pc, #52]	; (8004750 <prvInitialiseTaskLists+0x64>)
 800471a:	f7ff fb21 	bl	8003d60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800471e:	480d      	ldr	r0, [pc, #52]	; (8004754 <prvInitialiseTaskLists+0x68>)
 8004720:	f7ff fb1e 	bl	8003d60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004724:	480c      	ldr	r0, [pc, #48]	; (8004758 <prvInitialiseTaskLists+0x6c>)
 8004726:	f7ff fb1b 	bl	8003d60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800472a:	480c      	ldr	r0, [pc, #48]	; (800475c <prvInitialiseTaskLists+0x70>)
 800472c:	f7ff fb18 	bl	8003d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004730:	480b      	ldr	r0, [pc, #44]	; (8004760 <prvInitialiseTaskLists+0x74>)
 8004732:	f7ff fb15 	bl	8003d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <prvInitialiseTaskLists+0x78>)
 8004738:	4a05      	ldr	r2, [pc, #20]	; (8004750 <prvInitialiseTaskLists+0x64>)
 800473a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800473c:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <prvInitialiseTaskLists+0x7c>)
 800473e:	4a05      	ldr	r2, [pc, #20]	; (8004754 <prvInitialiseTaskLists+0x68>)
 8004740:	601a      	str	r2, [r3, #0]
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	200003cc 	.word	0x200003cc
 8004750:	20000458 	.word	0x20000458
 8004754:	2000046c 	.word	0x2000046c
 8004758:	20000488 	.word	0x20000488
 800475c:	2000049c 	.word	0x2000049c
 8004760:	200004b4 	.word	0x200004b4
 8004764:	20000480 	.word	0x20000480
 8004768:	20000484 	.word	0x20000484

0800476c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004772:	e019      	b.n	80047a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004774:	f000 f9ea 	bl	8004b4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004778:	4b10      	ldr	r3, [pc, #64]	; (80047bc <prvCheckTasksWaitingTermination+0x50>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3304      	adds	r3, #4
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fb75 	bl	8003e74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800478a:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <prvCheckTasksWaitingTermination+0x54>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3b01      	subs	r3, #1
 8004790:	4a0b      	ldr	r2, [pc, #44]	; (80047c0 <prvCheckTasksWaitingTermination+0x54>)
 8004792:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <prvCheckTasksWaitingTermination+0x58>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3b01      	subs	r3, #1
 800479a:	4a0a      	ldr	r2, [pc, #40]	; (80047c4 <prvCheckTasksWaitingTermination+0x58>)
 800479c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800479e:	f000 fa09 	bl	8004bb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f810 	bl	80047c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <prvCheckTasksWaitingTermination+0x58>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e1      	bne.n	8004774 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	2000049c 	.word	0x2000049c
 80047c0:	200004c8 	.word	0x200004c8
 80047c4:	200004b0 	.word	0x200004b0

080047c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d108      	bne.n	80047ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fb66 	bl	8004eb0 <vPortFree>
				vPortFree( pxTCB );
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 fb63 	bl	8004eb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047ea:	e01a      	b.n	8004822 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d103      	bne.n	80047fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fb5a 	bl	8004eb0 <vPortFree>
	}
 80047fc:	e011      	b.n	8004822 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004804:	2b02      	cmp	r3, #2
 8004806:	d00c      	beq.n	8004822 <prvDeleteTCB+0x5a>
	__asm volatile
 8004808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480c:	b672      	cpsid	i
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	b662      	cpsie	i
 800481c:	60fb      	str	r3, [r7, #12]
}
 800481e:	bf00      	nop
 8004820:	e7fe      	b.n	8004820 <prvDeleteTCB+0x58>
	}
 8004822:	bf00      	nop
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004832:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <prvResetNextTaskUnblockTime+0x38>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d104      	bne.n	8004846 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800483c:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <prvResetNextTaskUnblockTime+0x3c>)
 800483e:	f04f 32ff 	mov.w	r2, #4294967295
 8004842:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004844:	e008      	b.n	8004858 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004846:	4b07      	ldr	r3, [pc, #28]	; (8004864 <prvResetNextTaskUnblockTime+0x38>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	4a04      	ldr	r2, [pc, #16]	; (8004868 <prvResetNextTaskUnblockTime+0x3c>)
 8004856:	6013      	str	r3, [r2, #0]
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	20000480 	.word	0x20000480
 8004868:	200004e8 	.word	0x200004e8

0800486c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004876:	4b29      	ldr	r3, [pc, #164]	; (800491c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800487c:	4b28      	ldr	r3, [pc, #160]	; (8004920 <prvAddCurrentTaskToDelayedList+0xb4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3304      	adds	r3, #4
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff faf6 	bl	8003e74 <uxListRemove>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10b      	bne.n	80048a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800488e:	4b24      	ldr	r3, [pc, #144]	; (8004920 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	2201      	movs	r2, #1
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43da      	mvns	r2, r3
 800489c:	4b21      	ldr	r3, [pc, #132]	; (8004924 <prvAddCurrentTaskToDelayedList+0xb8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4013      	ands	r3, r2
 80048a2:	4a20      	ldr	r2, [pc, #128]	; (8004924 <prvAddCurrentTaskToDelayedList+0xb8>)
 80048a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ac:	d10a      	bne.n	80048c4 <prvAddCurrentTaskToDelayedList+0x58>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d007      	beq.n	80048c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048b4:	4b1a      	ldr	r3, [pc, #104]	; (8004920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4619      	mov	r1, r3
 80048bc:	481a      	ldr	r0, [pc, #104]	; (8004928 <prvAddCurrentTaskToDelayedList+0xbc>)
 80048be:	f7ff fa7c 	bl	8003dba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048c2:	e026      	b.n	8004912 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4413      	add	r3, r2
 80048ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048cc:	4b14      	ldr	r3, [pc, #80]	; (8004920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d209      	bcs.n	80048f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048dc:	4b13      	ldr	r3, [pc, #76]	; (800492c <prvAddCurrentTaskToDelayedList+0xc0>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3304      	adds	r3, #4
 80048e6:	4619      	mov	r1, r3
 80048e8:	4610      	mov	r0, r2
 80048ea:	f7ff fa8a 	bl	8003e02 <vListInsert>
}
 80048ee:	e010      	b.n	8004912 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048f0:	4b0f      	ldr	r3, [pc, #60]	; (8004930 <prvAddCurrentTaskToDelayedList+0xc4>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3304      	adds	r3, #4
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f7ff fa80 	bl	8003e02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004902:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	429a      	cmp	r2, r3
 800490a:	d202      	bcs.n	8004912 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800490c:	4a09      	ldr	r2, [pc, #36]	; (8004934 <prvAddCurrentTaskToDelayedList+0xc8>)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	6013      	str	r3, [r2, #0]
}
 8004912:	bf00      	nop
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	200004cc 	.word	0x200004cc
 8004920:	200003c8 	.word	0x200003c8
 8004924:	200004d0 	.word	0x200004d0
 8004928:	200004b4 	.word	0x200004b4
 800492c:	20000484 	.word	0x20000484
 8004930:	20000480 	.word	0x20000480
 8004934:	200004e8 	.word	0x200004e8

08004938 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3b04      	subs	r3, #4
 8004948:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3b04      	subs	r3, #4
 8004956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f023 0201 	bic.w	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3b04      	subs	r3, #4
 8004966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004968:	4a0c      	ldr	r2, [pc, #48]	; (800499c <pxPortInitialiseStack+0x64>)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3b14      	subs	r3, #20
 8004972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3b04      	subs	r3, #4
 800497e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f06f 0202 	mvn.w	r2, #2
 8004986:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3b20      	subs	r3, #32
 800498c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800498e:	68fb      	ldr	r3, [r7, #12]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	080049a1 	.word	0x080049a1

080049a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049aa:	4b14      	ldr	r3, [pc, #80]	; (80049fc <prvTaskExitError+0x5c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b2:	d00c      	beq.n	80049ce <prvTaskExitError+0x2e>
	__asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	b672      	cpsid	i
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	b662      	cpsie	i
 80049c8:	60fb      	str	r3, [r7, #12]
}
 80049ca:	bf00      	nop
 80049cc:	e7fe      	b.n	80049cc <prvTaskExitError+0x2c>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	b672      	cpsid	i
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	b662      	cpsie	i
 80049e2:	60bb      	str	r3, [r7, #8]
}
 80049e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049e6:	bf00      	nop
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0fc      	beq.n	80049e8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049ee:	bf00      	nop
 80049f0:	bf00      	nop
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	2000000c 	.word	0x2000000c

08004a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <pxCurrentTCBConst2>)
 8004a02:	6819      	ldr	r1, [r3, #0]
 8004a04:	6808      	ldr	r0, [r1, #0]
 8004a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0a:	f380 8809 	msr	PSP, r0
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f04f 0000 	mov.w	r0, #0
 8004a16:	f380 8811 	msr	BASEPRI, r0
 8004a1a:	4770      	bx	lr
 8004a1c:	f3af 8000 	nop.w

08004a20 <pxCurrentTCBConst2>:
 8004a20:	200003c8 	.word	0x200003c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop

08004a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a28:	4808      	ldr	r0, [pc, #32]	; (8004a4c <prvPortStartFirstTask+0x24>)
 8004a2a:	6800      	ldr	r0, [r0, #0]
 8004a2c:	6800      	ldr	r0, [r0, #0]
 8004a2e:	f380 8808 	msr	MSP, r0
 8004a32:	f04f 0000 	mov.w	r0, #0
 8004a36:	f380 8814 	msr	CONTROL, r0
 8004a3a:	b662      	cpsie	i
 8004a3c:	b661      	cpsie	f
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	df00      	svc	0
 8004a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a4a:	bf00      	nop
 8004a4c:	e000ed08 	.word	0xe000ed08

08004a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a56:	4b37      	ldr	r3, [pc, #220]	; (8004b34 <xPortStartScheduler+0xe4>)
 8004a58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	22ff      	movs	r2, #255	; 0xff
 8004a66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	4b2f      	ldr	r3, [pc, #188]	; (8004b38 <xPortStartScheduler+0xe8>)
 8004a7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a7e:	4b2f      	ldr	r3, [pc, #188]	; (8004b3c <xPortStartScheduler+0xec>)
 8004a80:	2207      	movs	r2, #7
 8004a82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a84:	e009      	b.n	8004a9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004a86:	4b2d      	ldr	r3, [pc, #180]	; (8004b3c <xPortStartScheduler+0xec>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	4a2b      	ldr	r2, [pc, #172]	; (8004b3c <xPortStartScheduler+0xec>)
 8004a8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa2:	2b80      	cmp	r3, #128	; 0x80
 8004aa4:	d0ef      	beq.n	8004a86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004aa6:	4b25      	ldr	r3, [pc, #148]	; (8004b3c <xPortStartScheduler+0xec>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f1c3 0307 	rsb	r3, r3, #7
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d00c      	beq.n	8004acc <xPortStartScheduler+0x7c>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	b672      	cpsid	i
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	b662      	cpsie	i
 8004ac6:	60bb      	str	r3, [r7, #8]
}
 8004ac8:	bf00      	nop
 8004aca:	e7fe      	b.n	8004aca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004acc:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <xPortStartScheduler+0xec>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	4a1a      	ldr	r2, [pc, #104]	; (8004b3c <xPortStartScheduler+0xec>)
 8004ad4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ad6:	4b19      	ldr	r3, [pc, #100]	; (8004b3c <xPortStartScheduler+0xec>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ade:	4a17      	ldr	r2, [pc, #92]	; (8004b3c <xPortStartScheduler+0xec>)
 8004ae0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004aea:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <xPortStartScheduler+0xf0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a14      	ldr	r2, [pc, #80]	; (8004b40 <xPortStartScheduler+0xf0>)
 8004af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004af4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004af6:	4b12      	ldr	r3, [pc, #72]	; (8004b40 <xPortStartScheduler+0xf0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a11      	ldr	r2, [pc, #68]	; (8004b40 <xPortStartScheduler+0xf0>)
 8004afc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b00:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b02:	f000 f8dd 	bl	8004cc0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b06:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <xPortStartScheduler+0xf4>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b0c:	f000 f8fc 	bl	8004d08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b10:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <xPortStartScheduler+0xf8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a0c      	ldr	r2, [pc, #48]	; (8004b48 <xPortStartScheduler+0xf8>)
 8004b16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b1a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b1c:	f7ff ff84 	bl	8004a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b20:	f7ff fd6e 	bl	8004600 <vTaskSwitchContext>
	prvTaskExitError();
 8004b24:	f7ff ff3c 	bl	80049a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	e000e400 	.word	0xe000e400
 8004b38:	200004f4 	.word	0x200004f4
 8004b3c:	200004f8 	.word	0x200004f8
 8004b40:	e000ed20 	.word	0xe000ed20
 8004b44:	2000000c 	.word	0x2000000c
 8004b48:	e000ef34 	.word	0xe000ef34

08004b4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
	__asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	b672      	cpsid	i
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	b662      	cpsie	i
 8004b66:	607b      	str	r3, [r7, #4]
}
 8004b68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b6a:	4b10      	ldr	r3, [pc, #64]	; (8004bac <vPortEnterCritical+0x60>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	4a0e      	ldr	r2, [pc, #56]	; (8004bac <vPortEnterCritical+0x60>)
 8004b72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b74:	4b0d      	ldr	r3, [pc, #52]	; (8004bac <vPortEnterCritical+0x60>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d111      	bne.n	8004ba0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <vPortEnterCritical+0x64>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00c      	beq.n	8004ba0 <vPortEnterCritical+0x54>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	b672      	cpsid	i
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	b662      	cpsie	i
 8004b9a:	603b      	str	r3, [r7, #0]
}
 8004b9c:	bf00      	nop
 8004b9e:	e7fe      	b.n	8004b9e <vPortEnterCritical+0x52>
	}
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	2000000c 	.word	0x2000000c
 8004bb0:	e000ed04 	.word	0xe000ed04

08004bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bba:	4b13      	ldr	r3, [pc, #76]	; (8004c08 <vPortExitCritical+0x54>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10c      	bne.n	8004bdc <vPortExitCritical+0x28>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	b672      	cpsid	i
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	b662      	cpsie	i
 8004bd6:	607b      	str	r3, [r7, #4]
}
 8004bd8:	bf00      	nop
 8004bda:	e7fe      	b.n	8004bda <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <vPortExitCritical+0x54>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3b01      	subs	r3, #1
 8004be2:	4a09      	ldr	r2, [pc, #36]	; (8004c08 <vPortExitCritical+0x54>)
 8004be4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004be6:	4b08      	ldr	r3, [pc, #32]	; (8004c08 <vPortExitCritical+0x54>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d105      	bne.n	8004bfa <vPortExitCritical+0x46>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bf8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	2000000c 	.word	0x2000000c
 8004c0c:	00000000 	.word	0x00000000

08004c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c10:	f3ef 8009 	mrs	r0, PSP
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	4b15      	ldr	r3, [pc, #84]	; (8004c70 <pxCurrentTCBConst>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	f01e 0f10 	tst.w	lr, #16
 8004c20:	bf08      	it	eq
 8004c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2a:	6010      	str	r0, [r2, #0]
 8004c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c34:	b672      	cpsid	i
 8004c36:	f380 8811 	msr	BASEPRI, r0
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	b662      	cpsie	i
 8004c44:	f7ff fcdc 	bl	8004600 <vTaskSwitchContext>
 8004c48:	f04f 0000 	mov.w	r0, #0
 8004c4c:	f380 8811 	msr	BASEPRI, r0
 8004c50:	bc09      	pop	{r0, r3}
 8004c52:	6819      	ldr	r1, [r3, #0]
 8004c54:	6808      	ldr	r0, [r1, #0]
 8004c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5a:	f01e 0f10 	tst.w	lr, #16
 8004c5e:	bf08      	it	eq
 8004c60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c64:	f380 8809 	msr	PSP, r0
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop

08004c70 <pxCurrentTCBConst>:
 8004c70:	200003c8 	.word	0x200003c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop

08004c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	b672      	cpsid	i
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	b662      	cpsie	i
 8004c92:	607b      	str	r3, [r7, #4]
}
 8004c94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c96:	f7ff fbf9 	bl	800448c <xTaskIncrementTick>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ca0:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <SysTick_Handler+0x44>)
 8004ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	f383 8811 	msr	BASEPRI, r3
}
 8004cb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004cb4:	bf00      	nop
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	e000ed04 	.word	0xe000ed04

08004cc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <vPortSetupTimerInterrupt+0x34>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cca:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <vPortSetupTimerInterrupt+0x38>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <vPortSetupTimerInterrupt+0x3c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a0a      	ldr	r2, [pc, #40]	; (8004d00 <vPortSetupTimerInterrupt+0x40>)
 8004cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cda:	099b      	lsrs	r3, r3, #6
 8004cdc:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <vPortSetupTimerInterrupt+0x44>)
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ce2:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <vPortSetupTimerInterrupt+0x34>)
 8004ce4:	2207      	movs	r2, #7
 8004ce6:	601a      	str	r2, [r3, #0]
}
 8004ce8:	bf00      	nop
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	e000e010 	.word	0xe000e010
 8004cf8:	e000e018 	.word	0xe000e018
 8004cfc:	20000000 	.word	0x20000000
 8004d00:	10624dd3 	.word	0x10624dd3
 8004d04:	e000e014 	.word	0xe000e014

08004d08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d18 <vPortEnableVFP+0x10>
 8004d0c:	6801      	ldr	r1, [r0, #0]
 8004d0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d12:	6001      	str	r1, [r0, #0]
 8004d14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d16:	bf00      	nop
 8004d18:	e000ed88 	.word	0xe000ed88

08004d1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	; 0x28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d28:	f7ff fb04 	bl	8004334 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d2c:	4b5b      	ldr	r3, [pc, #364]	; (8004e9c <pvPortMalloc+0x180>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d34:	f000 f91a 	bl	8004f6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d38:	4b59      	ldr	r3, [pc, #356]	; (8004ea0 <pvPortMalloc+0x184>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f040 8092 	bne.w	8004e6a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01f      	beq.n	8004d8c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4413      	add	r3, r2
 8004d52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d016      	beq.n	8004d8c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f023 0307 	bic.w	r3, r3, #7
 8004d64:	3308      	adds	r3, #8
 8004d66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00c      	beq.n	8004d8c <pvPortMalloc+0x70>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	b672      	cpsid	i
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	b662      	cpsie	i
 8004d86:	617b      	str	r3, [r7, #20]
}
 8004d88:	bf00      	nop
 8004d8a:	e7fe      	b.n	8004d8a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d06b      	beq.n	8004e6a <pvPortMalloc+0x14e>
 8004d92:	4b44      	ldr	r3, [pc, #272]	; (8004ea4 <pvPortMalloc+0x188>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d866      	bhi.n	8004e6a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d9c:	4b42      	ldr	r3, [pc, #264]	; (8004ea8 <pvPortMalloc+0x18c>)
 8004d9e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004da0:	4b41      	ldr	r3, [pc, #260]	; (8004ea8 <pvPortMalloc+0x18c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004da6:	e004      	b.n	8004db2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d903      	bls.n	8004dc4 <pvPortMalloc+0xa8>
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1f1      	bne.n	8004da8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004dc4:	4b35      	ldr	r3, [pc, #212]	; (8004e9c <pvPortMalloc+0x180>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d04d      	beq.n	8004e6a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2208      	movs	r2, #8
 8004dd4:	4413      	add	r3, r2
 8004dd6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	1ad2      	subs	r2, r2, r3
 8004de8:	2308      	movs	r3, #8
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d921      	bls.n	8004e34 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4413      	add	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00c      	beq.n	8004e1c <pvPortMalloc+0x100>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	b672      	cpsid	i
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	b662      	cpsie	i
 8004e16:	613b      	str	r3, [r7, #16]
}
 8004e18:	bf00      	nop
 8004e1a:	e7fe      	b.n	8004e1a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	1ad2      	subs	r2, r2, r3
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e2e:	69b8      	ldr	r0, [r7, #24]
 8004e30:	f000 f8fe 	bl	8005030 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e34:	4b1b      	ldr	r3, [pc, #108]	; (8004ea4 <pvPortMalloc+0x188>)
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	4a19      	ldr	r2, [pc, #100]	; (8004ea4 <pvPortMalloc+0x188>)
 8004e40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e42:	4b18      	ldr	r3, [pc, #96]	; (8004ea4 <pvPortMalloc+0x188>)
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4b19      	ldr	r3, [pc, #100]	; (8004eac <pvPortMalloc+0x190>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d203      	bcs.n	8004e56 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e4e:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <pvPortMalloc+0x188>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a16      	ldr	r2, [pc, #88]	; (8004eac <pvPortMalloc+0x190>)
 8004e54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	4b11      	ldr	r3, [pc, #68]	; (8004ea0 <pvPortMalloc+0x184>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e6a:	f7ff fa71 	bl	8004350 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00c      	beq.n	8004e92 <pvPortMalloc+0x176>
	__asm volatile
 8004e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7c:	b672      	cpsid	i
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	b662      	cpsie	i
 8004e8c:	60fb      	str	r3, [r7, #12]
}
 8004e8e:	bf00      	nop
 8004e90:	e7fe      	b.n	8004e90 <pvPortMalloc+0x174>
	return pvReturn;
 8004e92:	69fb      	ldr	r3, [r7, #28]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3728      	adds	r7, #40	; 0x28
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20004104 	.word	0x20004104
 8004ea0:	20004110 	.word	0x20004110
 8004ea4:	20004108 	.word	0x20004108
 8004ea8:	200040fc 	.word	0x200040fc
 8004eac:	2000410c 	.word	0x2000410c

08004eb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d04c      	beq.n	8004f5c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ec2:	2308      	movs	r3, #8
 8004ec4:	425b      	negs	r3, r3
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4413      	add	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	4b23      	ldr	r3, [pc, #140]	; (8004f64 <vPortFree+0xb4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10c      	bne.n	8004ef8 <vPortFree+0x48>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	b672      	cpsid	i
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	b662      	cpsie	i
 8004ef2:	60fb      	str	r3, [r7, #12]
}
 8004ef4:	bf00      	nop
 8004ef6:	e7fe      	b.n	8004ef6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00c      	beq.n	8004f1a <vPortFree+0x6a>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	b672      	cpsid	i
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	b662      	cpsie	i
 8004f14:	60bb      	str	r3, [r7, #8]
}
 8004f16:	bf00      	nop
 8004f18:	e7fe      	b.n	8004f18 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <vPortFree+0xb4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4013      	ands	r3, r2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d019      	beq.n	8004f5c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d115      	bne.n	8004f5c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <vPortFree+0xb4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	401a      	ands	r2, r3
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f40:	f7ff f9f8 	bl	8004334 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <vPortFree+0xb8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	4a06      	ldr	r2, [pc, #24]	; (8004f68 <vPortFree+0xb8>)
 8004f50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f52:	6938      	ldr	r0, [r7, #16]
 8004f54:	f000 f86c 	bl	8005030 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004f58:	f7ff f9fa 	bl	8004350 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f5c:	bf00      	nop
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20004110 	.word	0x20004110
 8004f68:	20004108 	.word	0x20004108

08004f6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f72:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004f76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f78:	4b27      	ldr	r3, [pc, #156]	; (8005018 <prvHeapInit+0xac>)
 8004f7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00c      	beq.n	8004fa0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3307      	adds	r3, #7
 8004f8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0307 	bic.w	r3, r3, #7
 8004f92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <prvHeapInit+0xac>)
 8004f9c:	4413      	add	r3, r2
 8004f9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fa4:	4a1d      	ldr	r2, [pc, #116]	; (800501c <prvHeapInit+0xb0>)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004faa:	4b1c      	ldr	r3, [pc, #112]	; (800501c <prvHeapInit+0xb0>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004fb8:	2208      	movs	r2, #8
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	1a9b      	subs	r3, r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0307 	bic.w	r3, r3, #7
 8004fc6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4a15      	ldr	r2, [pc, #84]	; (8005020 <prvHeapInit+0xb4>)
 8004fcc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004fce:	4b14      	ldr	r3, [pc, #80]	; (8005020 <prvHeapInit+0xb4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004fd6:	4b12      	ldr	r3, [pc, #72]	; (8005020 <prvHeapInit+0xb4>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	1ad2      	subs	r2, r2, r3
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fec:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <prvHeapInit+0xb4>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	4a0a      	ldr	r2, [pc, #40]	; (8005024 <prvHeapInit+0xb8>)
 8004ffa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	4a09      	ldr	r2, [pc, #36]	; (8005028 <prvHeapInit+0xbc>)
 8005002:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005004:	4b09      	ldr	r3, [pc, #36]	; (800502c <prvHeapInit+0xc0>)
 8005006:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800500a:	601a      	str	r2, [r3, #0]
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	200004fc 	.word	0x200004fc
 800501c:	200040fc 	.word	0x200040fc
 8005020:	20004104 	.word	0x20004104
 8005024:	2000410c 	.word	0x2000410c
 8005028:	20004108 	.word	0x20004108
 800502c:	20004110 	.word	0x20004110

08005030 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005038:	4b28      	ldr	r3, [pc, #160]	; (80050dc <prvInsertBlockIntoFreeList+0xac>)
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	e002      	b.n	8005044 <prvInsertBlockIntoFreeList+0x14>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	429a      	cmp	r2, r3
 800504c:	d8f7      	bhi.n	800503e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	4413      	add	r3, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	429a      	cmp	r2, r3
 800505e:	d108      	bne.n	8005072 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	441a      	add	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	441a      	add	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d118      	bne.n	80050b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <prvInsertBlockIntoFreeList+0xb0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	d00d      	beq.n	80050ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	441a      	add	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	e008      	b.n	80050c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050ae:	4b0c      	ldr	r3, [pc, #48]	; (80050e0 <prvInsertBlockIntoFreeList+0xb0>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	e003      	b.n	80050c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d002      	beq.n	80050ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	200040fc 	.word	0x200040fc
 80050e0:	20004104 	.word	0x20004104

080050e4 <std>:
 80050e4:	2300      	movs	r3, #0
 80050e6:	b510      	push	{r4, lr}
 80050e8:	4604      	mov	r4, r0
 80050ea:	e9c0 3300 	strd	r3, r3, [r0]
 80050ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050f2:	6083      	str	r3, [r0, #8]
 80050f4:	8181      	strh	r1, [r0, #12]
 80050f6:	6643      	str	r3, [r0, #100]	; 0x64
 80050f8:	81c2      	strh	r2, [r0, #14]
 80050fa:	6183      	str	r3, [r0, #24]
 80050fc:	4619      	mov	r1, r3
 80050fe:	2208      	movs	r2, #8
 8005100:	305c      	adds	r0, #92	; 0x5c
 8005102:	f000 f9e5 	bl	80054d0 <memset>
 8005106:	4b0d      	ldr	r3, [pc, #52]	; (800513c <std+0x58>)
 8005108:	6263      	str	r3, [r4, #36]	; 0x24
 800510a:	4b0d      	ldr	r3, [pc, #52]	; (8005140 <std+0x5c>)
 800510c:	62a3      	str	r3, [r4, #40]	; 0x28
 800510e:	4b0d      	ldr	r3, [pc, #52]	; (8005144 <std+0x60>)
 8005110:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005112:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <std+0x64>)
 8005114:	6323      	str	r3, [r4, #48]	; 0x30
 8005116:	4b0d      	ldr	r3, [pc, #52]	; (800514c <std+0x68>)
 8005118:	6224      	str	r4, [r4, #32]
 800511a:	429c      	cmp	r4, r3
 800511c:	d006      	beq.n	800512c <std+0x48>
 800511e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005122:	4294      	cmp	r4, r2
 8005124:	d002      	beq.n	800512c <std+0x48>
 8005126:	33d0      	adds	r3, #208	; 0xd0
 8005128:	429c      	cmp	r4, r3
 800512a:	d105      	bne.n	8005138 <std+0x54>
 800512c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005134:	f000 ba44 	b.w	80055c0 <__retarget_lock_init_recursive>
 8005138:	bd10      	pop	{r4, pc}
 800513a:	bf00      	nop
 800513c:	08005321 	.word	0x08005321
 8005140:	08005343 	.word	0x08005343
 8005144:	0800537b 	.word	0x0800537b
 8005148:	0800539f 	.word	0x0800539f
 800514c:	20004114 	.word	0x20004114

08005150 <stdio_exit_handler>:
 8005150:	4a02      	ldr	r2, [pc, #8]	; (800515c <stdio_exit_handler+0xc>)
 8005152:	4903      	ldr	r1, [pc, #12]	; (8005160 <stdio_exit_handler+0x10>)
 8005154:	4803      	ldr	r0, [pc, #12]	; (8005164 <stdio_exit_handler+0x14>)
 8005156:	f000 b869 	b.w	800522c <_fwalk_sglue>
 800515a:	bf00      	nop
 800515c:	20000010 	.word	0x20000010
 8005160:	080058c5 	.word	0x080058c5
 8005164:	2000001c 	.word	0x2000001c

08005168 <cleanup_stdio>:
 8005168:	6841      	ldr	r1, [r0, #4]
 800516a:	4b0c      	ldr	r3, [pc, #48]	; (800519c <cleanup_stdio+0x34>)
 800516c:	4299      	cmp	r1, r3
 800516e:	b510      	push	{r4, lr}
 8005170:	4604      	mov	r4, r0
 8005172:	d001      	beq.n	8005178 <cleanup_stdio+0x10>
 8005174:	f000 fba6 	bl	80058c4 <_fflush_r>
 8005178:	68a1      	ldr	r1, [r4, #8]
 800517a:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <cleanup_stdio+0x38>)
 800517c:	4299      	cmp	r1, r3
 800517e:	d002      	beq.n	8005186 <cleanup_stdio+0x1e>
 8005180:	4620      	mov	r0, r4
 8005182:	f000 fb9f 	bl	80058c4 <_fflush_r>
 8005186:	68e1      	ldr	r1, [r4, #12]
 8005188:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <cleanup_stdio+0x3c>)
 800518a:	4299      	cmp	r1, r3
 800518c:	d004      	beq.n	8005198 <cleanup_stdio+0x30>
 800518e:	4620      	mov	r0, r4
 8005190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005194:	f000 bb96 	b.w	80058c4 <_fflush_r>
 8005198:	bd10      	pop	{r4, pc}
 800519a:	bf00      	nop
 800519c:	20004114 	.word	0x20004114
 80051a0:	2000417c 	.word	0x2000417c
 80051a4:	200041e4 	.word	0x200041e4

080051a8 <global_stdio_init.part.0>:
 80051a8:	b510      	push	{r4, lr}
 80051aa:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <global_stdio_init.part.0+0x30>)
 80051ac:	4c0b      	ldr	r4, [pc, #44]	; (80051dc <global_stdio_init.part.0+0x34>)
 80051ae:	4a0c      	ldr	r2, [pc, #48]	; (80051e0 <global_stdio_init.part.0+0x38>)
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	4620      	mov	r0, r4
 80051b4:	2200      	movs	r2, #0
 80051b6:	2104      	movs	r1, #4
 80051b8:	f7ff ff94 	bl	80050e4 <std>
 80051bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80051c0:	2201      	movs	r2, #1
 80051c2:	2109      	movs	r1, #9
 80051c4:	f7ff ff8e 	bl	80050e4 <std>
 80051c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80051cc:	2202      	movs	r2, #2
 80051ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d2:	2112      	movs	r1, #18
 80051d4:	f7ff bf86 	b.w	80050e4 <std>
 80051d8:	2000424c 	.word	0x2000424c
 80051dc:	20004114 	.word	0x20004114
 80051e0:	08005151 	.word	0x08005151

080051e4 <__sfp_lock_acquire>:
 80051e4:	4801      	ldr	r0, [pc, #4]	; (80051ec <__sfp_lock_acquire+0x8>)
 80051e6:	f000 b9ec 	b.w	80055c2 <__retarget_lock_acquire_recursive>
 80051ea:	bf00      	nop
 80051ec:	20004255 	.word	0x20004255

080051f0 <__sfp_lock_release>:
 80051f0:	4801      	ldr	r0, [pc, #4]	; (80051f8 <__sfp_lock_release+0x8>)
 80051f2:	f000 b9e7 	b.w	80055c4 <__retarget_lock_release_recursive>
 80051f6:	bf00      	nop
 80051f8:	20004255 	.word	0x20004255

080051fc <__sinit>:
 80051fc:	b510      	push	{r4, lr}
 80051fe:	4604      	mov	r4, r0
 8005200:	f7ff fff0 	bl	80051e4 <__sfp_lock_acquire>
 8005204:	6a23      	ldr	r3, [r4, #32]
 8005206:	b11b      	cbz	r3, 8005210 <__sinit+0x14>
 8005208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800520c:	f7ff bff0 	b.w	80051f0 <__sfp_lock_release>
 8005210:	4b04      	ldr	r3, [pc, #16]	; (8005224 <__sinit+0x28>)
 8005212:	6223      	str	r3, [r4, #32]
 8005214:	4b04      	ldr	r3, [pc, #16]	; (8005228 <__sinit+0x2c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1f5      	bne.n	8005208 <__sinit+0xc>
 800521c:	f7ff ffc4 	bl	80051a8 <global_stdio_init.part.0>
 8005220:	e7f2      	b.n	8005208 <__sinit+0xc>
 8005222:	bf00      	nop
 8005224:	08005169 	.word	0x08005169
 8005228:	2000424c 	.word	0x2000424c

0800522c <_fwalk_sglue>:
 800522c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005230:	4607      	mov	r7, r0
 8005232:	4688      	mov	r8, r1
 8005234:	4614      	mov	r4, r2
 8005236:	2600      	movs	r6, #0
 8005238:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800523c:	f1b9 0901 	subs.w	r9, r9, #1
 8005240:	d505      	bpl.n	800524e <_fwalk_sglue+0x22>
 8005242:	6824      	ldr	r4, [r4, #0]
 8005244:	2c00      	cmp	r4, #0
 8005246:	d1f7      	bne.n	8005238 <_fwalk_sglue+0xc>
 8005248:	4630      	mov	r0, r6
 800524a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800524e:	89ab      	ldrh	r3, [r5, #12]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d907      	bls.n	8005264 <_fwalk_sglue+0x38>
 8005254:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005258:	3301      	adds	r3, #1
 800525a:	d003      	beq.n	8005264 <_fwalk_sglue+0x38>
 800525c:	4629      	mov	r1, r5
 800525e:	4638      	mov	r0, r7
 8005260:	47c0      	blx	r8
 8005262:	4306      	orrs	r6, r0
 8005264:	3568      	adds	r5, #104	; 0x68
 8005266:	e7e9      	b.n	800523c <_fwalk_sglue+0x10>

08005268 <_puts_r>:
 8005268:	6a03      	ldr	r3, [r0, #32]
 800526a:	b570      	push	{r4, r5, r6, lr}
 800526c:	6884      	ldr	r4, [r0, #8]
 800526e:	4605      	mov	r5, r0
 8005270:	460e      	mov	r6, r1
 8005272:	b90b      	cbnz	r3, 8005278 <_puts_r+0x10>
 8005274:	f7ff ffc2 	bl	80051fc <__sinit>
 8005278:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800527a:	07db      	lsls	r3, r3, #31
 800527c:	d405      	bmi.n	800528a <_puts_r+0x22>
 800527e:	89a3      	ldrh	r3, [r4, #12]
 8005280:	0598      	lsls	r0, r3, #22
 8005282:	d402      	bmi.n	800528a <_puts_r+0x22>
 8005284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005286:	f000 f99c 	bl	80055c2 <__retarget_lock_acquire_recursive>
 800528a:	89a3      	ldrh	r3, [r4, #12]
 800528c:	0719      	lsls	r1, r3, #28
 800528e:	d513      	bpl.n	80052b8 <_puts_r+0x50>
 8005290:	6923      	ldr	r3, [r4, #16]
 8005292:	b18b      	cbz	r3, 80052b8 <_puts_r+0x50>
 8005294:	3e01      	subs	r6, #1
 8005296:	68a3      	ldr	r3, [r4, #8]
 8005298:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800529c:	3b01      	subs	r3, #1
 800529e:	60a3      	str	r3, [r4, #8]
 80052a0:	b9e9      	cbnz	r1, 80052de <_puts_r+0x76>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	da2e      	bge.n	8005304 <_puts_r+0x9c>
 80052a6:	4622      	mov	r2, r4
 80052a8:	210a      	movs	r1, #10
 80052aa:	4628      	mov	r0, r5
 80052ac:	f000 f87b 	bl	80053a6 <__swbuf_r>
 80052b0:	3001      	adds	r0, #1
 80052b2:	d007      	beq.n	80052c4 <_puts_r+0x5c>
 80052b4:	250a      	movs	r5, #10
 80052b6:	e007      	b.n	80052c8 <_puts_r+0x60>
 80052b8:	4621      	mov	r1, r4
 80052ba:	4628      	mov	r0, r5
 80052bc:	f000 f8b0 	bl	8005420 <__swsetup_r>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d0e7      	beq.n	8005294 <_puts_r+0x2c>
 80052c4:	f04f 35ff 	mov.w	r5, #4294967295
 80052c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052ca:	07da      	lsls	r2, r3, #31
 80052cc:	d405      	bmi.n	80052da <_puts_r+0x72>
 80052ce:	89a3      	ldrh	r3, [r4, #12]
 80052d0:	059b      	lsls	r3, r3, #22
 80052d2:	d402      	bmi.n	80052da <_puts_r+0x72>
 80052d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052d6:	f000 f975 	bl	80055c4 <__retarget_lock_release_recursive>
 80052da:	4628      	mov	r0, r5
 80052dc:	bd70      	pop	{r4, r5, r6, pc}
 80052de:	2b00      	cmp	r3, #0
 80052e0:	da04      	bge.n	80052ec <_puts_r+0x84>
 80052e2:	69a2      	ldr	r2, [r4, #24]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	dc06      	bgt.n	80052f6 <_puts_r+0x8e>
 80052e8:	290a      	cmp	r1, #10
 80052ea:	d004      	beq.n	80052f6 <_puts_r+0x8e>
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	6022      	str	r2, [r4, #0]
 80052f2:	7019      	strb	r1, [r3, #0]
 80052f4:	e7cf      	b.n	8005296 <_puts_r+0x2e>
 80052f6:	4622      	mov	r2, r4
 80052f8:	4628      	mov	r0, r5
 80052fa:	f000 f854 	bl	80053a6 <__swbuf_r>
 80052fe:	3001      	adds	r0, #1
 8005300:	d1c9      	bne.n	8005296 <_puts_r+0x2e>
 8005302:	e7df      	b.n	80052c4 <_puts_r+0x5c>
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	250a      	movs	r5, #10
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	6022      	str	r2, [r4, #0]
 800530c:	701d      	strb	r5, [r3, #0]
 800530e:	e7db      	b.n	80052c8 <_puts_r+0x60>

08005310 <puts>:
 8005310:	4b02      	ldr	r3, [pc, #8]	; (800531c <puts+0xc>)
 8005312:	4601      	mov	r1, r0
 8005314:	6818      	ldr	r0, [r3, #0]
 8005316:	f7ff bfa7 	b.w	8005268 <_puts_r>
 800531a:	bf00      	nop
 800531c:	20000068 	.word	0x20000068

08005320 <__sread>:
 8005320:	b510      	push	{r4, lr}
 8005322:	460c      	mov	r4, r1
 8005324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005328:	f000 f8fc 	bl	8005524 <_read_r>
 800532c:	2800      	cmp	r0, #0
 800532e:	bfab      	itete	ge
 8005330:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005332:	89a3      	ldrhlt	r3, [r4, #12]
 8005334:	181b      	addge	r3, r3, r0
 8005336:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800533a:	bfac      	ite	ge
 800533c:	6563      	strge	r3, [r4, #84]	; 0x54
 800533e:	81a3      	strhlt	r3, [r4, #12]
 8005340:	bd10      	pop	{r4, pc}

08005342 <__swrite>:
 8005342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005346:	461f      	mov	r7, r3
 8005348:	898b      	ldrh	r3, [r1, #12]
 800534a:	05db      	lsls	r3, r3, #23
 800534c:	4605      	mov	r5, r0
 800534e:	460c      	mov	r4, r1
 8005350:	4616      	mov	r6, r2
 8005352:	d505      	bpl.n	8005360 <__swrite+0x1e>
 8005354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005358:	2302      	movs	r3, #2
 800535a:	2200      	movs	r2, #0
 800535c:	f000 f8d0 	bl	8005500 <_lseek_r>
 8005360:	89a3      	ldrh	r3, [r4, #12]
 8005362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800536a:	81a3      	strh	r3, [r4, #12]
 800536c:	4632      	mov	r2, r6
 800536e:	463b      	mov	r3, r7
 8005370:	4628      	mov	r0, r5
 8005372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005376:	f000 b8e7 	b.w	8005548 <_write_r>

0800537a <__sseek>:
 800537a:	b510      	push	{r4, lr}
 800537c:	460c      	mov	r4, r1
 800537e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005382:	f000 f8bd 	bl	8005500 <_lseek_r>
 8005386:	1c43      	adds	r3, r0, #1
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	bf15      	itete	ne
 800538c:	6560      	strne	r0, [r4, #84]	; 0x54
 800538e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005392:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005396:	81a3      	strheq	r3, [r4, #12]
 8005398:	bf18      	it	ne
 800539a:	81a3      	strhne	r3, [r4, #12]
 800539c:	bd10      	pop	{r4, pc}

0800539e <__sclose>:
 800539e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a2:	f000 b89d 	b.w	80054e0 <_close_r>

080053a6 <__swbuf_r>:
 80053a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a8:	460e      	mov	r6, r1
 80053aa:	4614      	mov	r4, r2
 80053ac:	4605      	mov	r5, r0
 80053ae:	b118      	cbz	r0, 80053b8 <__swbuf_r+0x12>
 80053b0:	6a03      	ldr	r3, [r0, #32]
 80053b2:	b90b      	cbnz	r3, 80053b8 <__swbuf_r+0x12>
 80053b4:	f7ff ff22 	bl	80051fc <__sinit>
 80053b8:	69a3      	ldr	r3, [r4, #24]
 80053ba:	60a3      	str	r3, [r4, #8]
 80053bc:	89a3      	ldrh	r3, [r4, #12]
 80053be:	071a      	lsls	r2, r3, #28
 80053c0:	d525      	bpl.n	800540e <__swbuf_r+0x68>
 80053c2:	6923      	ldr	r3, [r4, #16]
 80053c4:	b31b      	cbz	r3, 800540e <__swbuf_r+0x68>
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	6922      	ldr	r2, [r4, #16]
 80053ca:	1a98      	subs	r0, r3, r2
 80053cc:	6963      	ldr	r3, [r4, #20]
 80053ce:	b2f6      	uxtb	r6, r6
 80053d0:	4283      	cmp	r3, r0
 80053d2:	4637      	mov	r7, r6
 80053d4:	dc04      	bgt.n	80053e0 <__swbuf_r+0x3a>
 80053d6:	4621      	mov	r1, r4
 80053d8:	4628      	mov	r0, r5
 80053da:	f000 fa73 	bl	80058c4 <_fflush_r>
 80053de:	b9e0      	cbnz	r0, 800541a <__swbuf_r+0x74>
 80053e0:	68a3      	ldr	r3, [r4, #8]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	60a3      	str	r3, [r4, #8]
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	6022      	str	r2, [r4, #0]
 80053ec:	701e      	strb	r6, [r3, #0]
 80053ee:	6962      	ldr	r2, [r4, #20]
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d004      	beq.n	8005400 <__swbuf_r+0x5a>
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	07db      	lsls	r3, r3, #31
 80053fa:	d506      	bpl.n	800540a <__swbuf_r+0x64>
 80053fc:	2e0a      	cmp	r6, #10
 80053fe:	d104      	bne.n	800540a <__swbuf_r+0x64>
 8005400:	4621      	mov	r1, r4
 8005402:	4628      	mov	r0, r5
 8005404:	f000 fa5e 	bl	80058c4 <_fflush_r>
 8005408:	b938      	cbnz	r0, 800541a <__swbuf_r+0x74>
 800540a:	4638      	mov	r0, r7
 800540c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800540e:	4621      	mov	r1, r4
 8005410:	4628      	mov	r0, r5
 8005412:	f000 f805 	bl	8005420 <__swsetup_r>
 8005416:	2800      	cmp	r0, #0
 8005418:	d0d5      	beq.n	80053c6 <__swbuf_r+0x20>
 800541a:	f04f 37ff 	mov.w	r7, #4294967295
 800541e:	e7f4      	b.n	800540a <__swbuf_r+0x64>

08005420 <__swsetup_r>:
 8005420:	b538      	push	{r3, r4, r5, lr}
 8005422:	4b2a      	ldr	r3, [pc, #168]	; (80054cc <__swsetup_r+0xac>)
 8005424:	4605      	mov	r5, r0
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	460c      	mov	r4, r1
 800542a:	b118      	cbz	r0, 8005434 <__swsetup_r+0x14>
 800542c:	6a03      	ldr	r3, [r0, #32]
 800542e:	b90b      	cbnz	r3, 8005434 <__swsetup_r+0x14>
 8005430:	f7ff fee4 	bl	80051fc <__sinit>
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800543a:	0718      	lsls	r0, r3, #28
 800543c:	d422      	bmi.n	8005484 <__swsetup_r+0x64>
 800543e:	06d9      	lsls	r1, r3, #27
 8005440:	d407      	bmi.n	8005452 <__swsetup_r+0x32>
 8005442:	2309      	movs	r3, #9
 8005444:	602b      	str	r3, [r5, #0]
 8005446:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800544a:	81a3      	strh	r3, [r4, #12]
 800544c:	f04f 30ff 	mov.w	r0, #4294967295
 8005450:	e034      	b.n	80054bc <__swsetup_r+0x9c>
 8005452:	0758      	lsls	r0, r3, #29
 8005454:	d512      	bpl.n	800547c <__swsetup_r+0x5c>
 8005456:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005458:	b141      	cbz	r1, 800546c <__swsetup_r+0x4c>
 800545a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800545e:	4299      	cmp	r1, r3
 8005460:	d002      	beq.n	8005468 <__swsetup_r+0x48>
 8005462:	4628      	mov	r0, r5
 8005464:	f000 f8b0 	bl	80055c8 <_free_r>
 8005468:	2300      	movs	r3, #0
 800546a:	6363      	str	r3, [r4, #52]	; 0x34
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005472:	81a3      	strh	r3, [r4, #12]
 8005474:	2300      	movs	r3, #0
 8005476:	6063      	str	r3, [r4, #4]
 8005478:	6923      	ldr	r3, [r4, #16]
 800547a:	6023      	str	r3, [r4, #0]
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	f043 0308 	orr.w	r3, r3, #8
 8005482:	81a3      	strh	r3, [r4, #12]
 8005484:	6923      	ldr	r3, [r4, #16]
 8005486:	b94b      	cbnz	r3, 800549c <__swsetup_r+0x7c>
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800548e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005492:	d003      	beq.n	800549c <__swsetup_r+0x7c>
 8005494:	4621      	mov	r1, r4
 8005496:	4628      	mov	r0, r5
 8005498:	f000 fa62 	bl	8005960 <__smakebuf_r>
 800549c:	89a0      	ldrh	r0, [r4, #12]
 800549e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054a2:	f010 0301 	ands.w	r3, r0, #1
 80054a6:	d00a      	beq.n	80054be <__swsetup_r+0x9e>
 80054a8:	2300      	movs	r3, #0
 80054aa:	60a3      	str	r3, [r4, #8]
 80054ac:	6963      	ldr	r3, [r4, #20]
 80054ae:	425b      	negs	r3, r3
 80054b0:	61a3      	str	r3, [r4, #24]
 80054b2:	6923      	ldr	r3, [r4, #16]
 80054b4:	b943      	cbnz	r3, 80054c8 <__swsetup_r+0xa8>
 80054b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054ba:	d1c4      	bne.n	8005446 <__swsetup_r+0x26>
 80054bc:	bd38      	pop	{r3, r4, r5, pc}
 80054be:	0781      	lsls	r1, r0, #30
 80054c0:	bf58      	it	pl
 80054c2:	6963      	ldrpl	r3, [r4, #20]
 80054c4:	60a3      	str	r3, [r4, #8]
 80054c6:	e7f4      	b.n	80054b2 <__swsetup_r+0x92>
 80054c8:	2000      	movs	r0, #0
 80054ca:	e7f7      	b.n	80054bc <__swsetup_r+0x9c>
 80054cc:	20000068 	.word	0x20000068

080054d0 <memset>:
 80054d0:	4402      	add	r2, r0
 80054d2:	4603      	mov	r3, r0
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d100      	bne.n	80054da <memset+0xa>
 80054d8:	4770      	bx	lr
 80054da:	f803 1b01 	strb.w	r1, [r3], #1
 80054de:	e7f9      	b.n	80054d4 <memset+0x4>

080054e0 <_close_r>:
 80054e0:	b538      	push	{r3, r4, r5, lr}
 80054e2:	4d06      	ldr	r5, [pc, #24]	; (80054fc <_close_r+0x1c>)
 80054e4:	2300      	movs	r3, #0
 80054e6:	4604      	mov	r4, r0
 80054e8:	4608      	mov	r0, r1
 80054ea:	602b      	str	r3, [r5, #0]
 80054ec:	f7fb fec1 	bl	8001272 <_close>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	d102      	bne.n	80054fa <_close_r+0x1a>
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	b103      	cbz	r3, 80054fa <_close_r+0x1a>
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	bd38      	pop	{r3, r4, r5, pc}
 80054fc:	20004250 	.word	0x20004250

08005500 <_lseek_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4d07      	ldr	r5, [pc, #28]	; (8005520 <_lseek_r+0x20>)
 8005504:	4604      	mov	r4, r0
 8005506:	4608      	mov	r0, r1
 8005508:	4611      	mov	r1, r2
 800550a:	2200      	movs	r2, #0
 800550c:	602a      	str	r2, [r5, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	f7fb fed6 	bl	80012c0 <_lseek>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_lseek_r+0x1e>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	b103      	cbz	r3, 800551e <_lseek_r+0x1e>
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	20004250 	.word	0x20004250

08005524 <_read_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	4d07      	ldr	r5, [pc, #28]	; (8005544 <_read_r+0x20>)
 8005528:	4604      	mov	r4, r0
 800552a:	4608      	mov	r0, r1
 800552c:	4611      	mov	r1, r2
 800552e:	2200      	movs	r2, #0
 8005530:	602a      	str	r2, [r5, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	f7fb fe64 	bl	8001200 <_read>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d102      	bne.n	8005542 <_read_r+0x1e>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	b103      	cbz	r3, 8005542 <_read_r+0x1e>
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	20004250 	.word	0x20004250

08005548 <_write_r>:
 8005548:	b538      	push	{r3, r4, r5, lr}
 800554a:	4d07      	ldr	r5, [pc, #28]	; (8005568 <_write_r+0x20>)
 800554c:	4604      	mov	r4, r0
 800554e:	4608      	mov	r0, r1
 8005550:	4611      	mov	r1, r2
 8005552:	2200      	movs	r2, #0
 8005554:	602a      	str	r2, [r5, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	f7fb fe6f 	bl	800123a <_write>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d102      	bne.n	8005566 <_write_r+0x1e>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	b103      	cbz	r3, 8005566 <_write_r+0x1e>
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	20004250 	.word	0x20004250

0800556c <__errno>:
 800556c:	4b01      	ldr	r3, [pc, #4]	; (8005574 <__errno+0x8>)
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	20000068 	.word	0x20000068

08005578 <__libc_init_array>:
 8005578:	b570      	push	{r4, r5, r6, lr}
 800557a:	4d0d      	ldr	r5, [pc, #52]	; (80055b0 <__libc_init_array+0x38>)
 800557c:	4c0d      	ldr	r4, [pc, #52]	; (80055b4 <__libc_init_array+0x3c>)
 800557e:	1b64      	subs	r4, r4, r5
 8005580:	10a4      	asrs	r4, r4, #2
 8005582:	2600      	movs	r6, #0
 8005584:	42a6      	cmp	r6, r4
 8005586:	d109      	bne.n	800559c <__libc_init_array+0x24>
 8005588:	4d0b      	ldr	r5, [pc, #44]	; (80055b8 <__libc_init_array+0x40>)
 800558a:	4c0c      	ldr	r4, [pc, #48]	; (80055bc <__libc_init_array+0x44>)
 800558c:	f000 fa56 	bl	8005a3c <_init>
 8005590:	1b64      	subs	r4, r4, r5
 8005592:	10a4      	asrs	r4, r4, #2
 8005594:	2600      	movs	r6, #0
 8005596:	42a6      	cmp	r6, r4
 8005598:	d105      	bne.n	80055a6 <__libc_init_array+0x2e>
 800559a:	bd70      	pop	{r4, r5, r6, pc}
 800559c:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a0:	4798      	blx	r3
 80055a2:	3601      	adds	r6, #1
 80055a4:	e7ee      	b.n	8005584 <__libc_init_array+0xc>
 80055a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055aa:	4798      	blx	r3
 80055ac:	3601      	adds	r6, #1
 80055ae:	e7f2      	b.n	8005596 <__libc_init_array+0x1e>
 80055b0:	08005ad8 	.word	0x08005ad8
 80055b4:	08005ad8 	.word	0x08005ad8
 80055b8:	08005ad8 	.word	0x08005ad8
 80055bc:	08005adc 	.word	0x08005adc

080055c0 <__retarget_lock_init_recursive>:
 80055c0:	4770      	bx	lr

080055c2 <__retarget_lock_acquire_recursive>:
 80055c2:	4770      	bx	lr

080055c4 <__retarget_lock_release_recursive>:
 80055c4:	4770      	bx	lr
	...

080055c8 <_free_r>:
 80055c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055ca:	2900      	cmp	r1, #0
 80055cc:	d044      	beq.n	8005658 <_free_r+0x90>
 80055ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d2:	9001      	str	r0, [sp, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f1a1 0404 	sub.w	r4, r1, #4
 80055da:	bfb8      	it	lt
 80055dc:	18e4      	addlt	r4, r4, r3
 80055de:	f000 f8df 	bl	80057a0 <__malloc_lock>
 80055e2:	4a1e      	ldr	r2, [pc, #120]	; (800565c <_free_r+0x94>)
 80055e4:	9801      	ldr	r0, [sp, #4]
 80055e6:	6813      	ldr	r3, [r2, #0]
 80055e8:	b933      	cbnz	r3, 80055f8 <_free_r+0x30>
 80055ea:	6063      	str	r3, [r4, #4]
 80055ec:	6014      	str	r4, [r2, #0]
 80055ee:	b003      	add	sp, #12
 80055f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055f4:	f000 b8da 	b.w	80057ac <__malloc_unlock>
 80055f8:	42a3      	cmp	r3, r4
 80055fa:	d908      	bls.n	800560e <_free_r+0x46>
 80055fc:	6825      	ldr	r5, [r4, #0]
 80055fe:	1961      	adds	r1, r4, r5
 8005600:	428b      	cmp	r3, r1
 8005602:	bf01      	itttt	eq
 8005604:	6819      	ldreq	r1, [r3, #0]
 8005606:	685b      	ldreq	r3, [r3, #4]
 8005608:	1949      	addeq	r1, r1, r5
 800560a:	6021      	streq	r1, [r4, #0]
 800560c:	e7ed      	b.n	80055ea <_free_r+0x22>
 800560e:	461a      	mov	r2, r3
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	b10b      	cbz	r3, 8005618 <_free_r+0x50>
 8005614:	42a3      	cmp	r3, r4
 8005616:	d9fa      	bls.n	800560e <_free_r+0x46>
 8005618:	6811      	ldr	r1, [r2, #0]
 800561a:	1855      	adds	r5, r2, r1
 800561c:	42a5      	cmp	r5, r4
 800561e:	d10b      	bne.n	8005638 <_free_r+0x70>
 8005620:	6824      	ldr	r4, [r4, #0]
 8005622:	4421      	add	r1, r4
 8005624:	1854      	adds	r4, r2, r1
 8005626:	42a3      	cmp	r3, r4
 8005628:	6011      	str	r1, [r2, #0]
 800562a:	d1e0      	bne.n	80055ee <_free_r+0x26>
 800562c:	681c      	ldr	r4, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	6053      	str	r3, [r2, #4]
 8005632:	440c      	add	r4, r1
 8005634:	6014      	str	r4, [r2, #0]
 8005636:	e7da      	b.n	80055ee <_free_r+0x26>
 8005638:	d902      	bls.n	8005640 <_free_r+0x78>
 800563a:	230c      	movs	r3, #12
 800563c:	6003      	str	r3, [r0, #0]
 800563e:	e7d6      	b.n	80055ee <_free_r+0x26>
 8005640:	6825      	ldr	r5, [r4, #0]
 8005642:	1961      	adds	r1, r4, r5
 8005644:	428b      	cmp	r3, r1
 8005646:	bf04      	itt	eq
 8005648:	6819      	ldreq	r1, [r3, #0]
 800564a:	685b      	ldreq	r3, [r3, #4]
 800564c:	6063      	str	r3, [r4, #4]
 800564e:	bf04      	itt	eq
 8005650:	1949      	addeq	r1, r1, r5
 8005652:	6021      	streq	r1, [r4, #0]
 8005654:	6054      	str	r4, [r2, #4]
 8005656:	e7ca      	b.n	80055ee <_free_r+0x26>
 8005658:	b003      	add	sp, #12
 800565a:	bd30      	pop	{r4, r5, pc}
 800565c:	20004258 	.word	0x20004258

08005660 <sbrk_aligned>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	4e0e      	ldr	r6, [pc, #56]	; (800569c <sbrk_aligned+0x3c>)
 8005664:	460c      	mov	r4, r1
 8005666:	6831      	ldr	r1, [r6, #0]
 8005668:	4605      	mov	r5, r0
 800566a:	b911      	cbnz	r1, 8005672 <sbrk_aligned+0x12>
 800566c:	f000 f9d6 	bl	8005a1c <_sbrk_r>
 8005670:	6030      	str	r0, [r6, #0]
 8005672:	4621      	mov	r1, r4
 8005674:	4628      	mov	r0, r5
 8005676:	f000 f9d1 	bl	8005a1c <_sbrk_r>
 800567a:	1c43      	adds	r3, r0, #1
 800567c:	d00a      	beq.n	8005694 <sbrk_aligned+0x34>
 800567e:	1cc4      	adds	r4, r0, #3
 8005680:	f024 0403 	bic.w	r4, r4, #3
 8005684:	42a0      	cmp	r0, r4
 8005686:	d007      	beq.n	8005698 <sbrk_aligned+0x38>
 8005688:	1a21      	subs	r1, r4, r0
 800568a:	4628      	mov	r0, r5
 800568c:	f000 f9c6 	bl	8005a1c <_sbrk_r>
 8005690:	3001      	adds	r0, #1
 8005692:	d101      	bne.n	8005698 <sbrk_aligned+0x38>
 8005694:	f04f 34ff 	mov.w	r4, #4294967295
 8005698:	4620      	mov	r0, r4
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	2000425c 	.word	0x2000425c

080056a0 <_malloc_r>:
 80056a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056a4:	1ccd      	adds	r5, r1, #3
 80056a6:	f025 0503 	bic.w	r5, r5, #3
 80056aa:	3508      	adds	r5, #8
 80056ac:	2d0c      	cmp	r5, #12
 80056ae:	bf38      	it	cc
 80056b0:	250c      	movcc	r5, #12
 80056b2:	2d00      	cmp	r5, #0
 80056b4:	4607      	mov	r7, r0
 80056b6:	db01      	blt.n	80056bc <_malloc_r+0x1c>
 80056b8:	42a9      	cmp	r1, r5
 80056ba:	d905      	bls.n	80056c8 <_malloc_r+0x28>
 80056bc:	230c      	movs	r3, #12
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	2600      	movs	r6, #0
 80056c2:	4630      	mov	r0, r6
 80056c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800579c <_malloc_r+0xfc>
 80056cc:	f000 f868 	bl	80057a0 <__malloc_lock>
 80056d0:	f8d8 3000 	ldr.w	r3, [r8]
 80056d4:	461c      	mov	r4, r3
 80056d6:	bb5c      	cbnz	r4, 8005730 <_malloc_r+0x90>
 80056d8:	4629      	mov	r1, r5
 80056da:	4638      	mov	r0, r7
 80056dc:	f7ff ffc0 	bl	8005660 <sbrk_aligned>
 80056e0:	1c43      	adds	r3, r0, #1
 80056e2:	4604      	mov	r4, r0
 80056e4:	d155      	bne.n	8005792 <_malloc_r+0xf2>
 80056e6:	f8d8 4000 	ldr.w	r4, [r8]
 80056ea:	4626      	mov	r6, r4
 80056ec:	2e00      	cmp	r6, #0
 80056ee:	d145      	bne.n	800577c <_malloc_r+0xdc>
 80056f0:	2c00      	cmp	r4, #0
 80056f2:	d048      	beq.n	8005786 <_malloc_r+0xe6>
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	4631      	mov	r1, r6
 80056f8:	4638      	mov	r0, r7
 80056fa:	eb04 0903 	add.w	r9, r4, r3
 80056fe:	f000 f98d 	bl	8005a1c <_sbrk_r>
 8005702:	4581      	cmp	r9, r0
 8005704:	d13f      	bne.n	8005786 <_malloc_r+0xe6>
 8005706:	6821      	ldr	r1, [r4, #0]
 8005708:	1a6d      	subs	r5, r5, r1
 800570a:	4629      	mov	r1, r5
 800570c:	4638      	mov	r0, r7
 800570e:	f7ff ffa7 	bl	8005660 <sbrk_aligned>
 8005712:	3001      	adds	r0, #1
 8005714:	d037      	beq.n	8005786 <_malloc_r+0xe6>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	442b      	add	r3, r5
 800571a:	6023      	str	r3, [r4, #0]
 800571c:	f8d8 3000 	ldr.w	r3, [r8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d038      	beq.n	8005796 <_malloc_r+0xf6>
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	42a2      	cmp	r2, r4
 8005728:	d12b      	bne.n	8005782 <_malloc_r+0xe2>
 800572a:	2200      	movs	r2, #0
 800572c:	605a      	str	r2, [r3, #4]
 800572e:	e00f      	b.n	8005750 <_malloc_r+0xb0>
 8005730:	6822      	ldr	r2, [r4, #0]
 8005732:	1b52      	subs	r2, r2, r5
 8005734:	d41f      	bmi.n	8005776 <_malloc_r+0xd6>
 8005736:	2a0b      	cmp	r2, #11
 8005738:	d917      	bls.n	800576a <_malloc_r+0xca>
 800573a:	1961      	adds	r1, r4, r5
 800573c:	42a3      	cmp	r3, r4
 800573e:	6025      	str	r5, [r4, #0]
 8005740:	bf18      	it	ne
 8005742:	6059      	strne	r1, [r3, #4]
 8005744:	6863      	ldr	r3, [r4, #4]
 8005746:	bf08      	it	eq
 8005748:	f8c8 1000 	streq.w	r1, [r8]
 800574c:	5162      	str	r2, [r4, r5]
 800574e:	604b      	str	r3, [r1, #4]
 8005750:	4638      	mov	r0, r7
 8005752:	f104 060b 	add.w	r6, r4, #11
 8005756:	f000 f829 	bl	80057ac <__malloc_unlock>
 800575a:	f026 0607 	bic.w	r6, r6, #7
 800575e:	1d23      	adds	r3, r4, #4
 8005760:	1af2      	subs	r2, r6, r3
 8005762:	d0ae      	beq.n	80056c2 <_malloc_r+0x22>
 8005764:	1b9b      	subs	r3, r3, r6
 8005766:	50a3      	str	r3, [r4, r2]
 8005768:	e7ab      	b.n	80056c2 <_malloc_r+0x22>
 800576a:	42a3      	cmp	r3, r4
 800576c:	6862      	ldr	r2, [r4, #4]
 800576e:	d1dd      	bne.n	800572c <_malloc_r+0x8c>
 8005770:	f8c8 2000 	str.w	r2, [r8]
 8005774:	e7ec      	b.n	8005750 <_malloc_r+0xb0>
 8005776:	4623      	mov	r3, r4
 8005778:	6864      	ldr	r4, [r4, #4]
 800577a:	e7ac      	b.n	80056d6 <_malloc_r+0x36>
 800577c:	4634      	mov	r4, r6
 800577e:	6876      	ldr	r6, [r6, #4]
 8005780:	e7b4      	b.n	80056ec <_malloc_r+0x4c>
 8005782:	4613      	mov	r3, r2
 8005784:	e7cc      	b.n	8005720 <_malloc_r+0x80>
 8005786:	230c      	movs	r3, #12
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	4638      	mov	r0, r7
 800578c:	f000 f80e 	bl	80057ac <__malloc_unlock>
 8005790:	e797      	b.n	80056c2 <_malloc_r+0x22>
 8005792:	6025      	str	r5, [r4, #0]
 8005794:	e7dc      	b.n	8005750 <_malloc_r+0xb0>
 8005796:	605b      	str	r3, [r3, #4]
 8005798:	deff      	udf	#255	; 0xff
 800579a:	bf00      	nop
 800579c:	20004258 	.word	0x20004258

080057a0 <__malloc_lock>:
 80057a0:	4801      	ldr	r0, [pc, #4]	; (80057a8 <__malloc_lock+0x8>)
 80057a2:	f7ff bf0e 	b.w	80055c2 <__retarget_lock_acquire_recursive>
 80057a6:	bf00      	nop
 80057a8:	20004254 	.word	0x20004254

080057ac <__malloc_unlock>:
 80057ac:	4801      	ldr	r0, [pc, #4]	; (80057b4 <__malloc_unlock+0x8>)
 80057ae:	f7ff bf09 	b.w	80055c4 <__retarget_lock_release_recursive>
 80057b2:	bf00      	nop
 80057b4:	20004254 	.word	0x20004254

080057b8 <__sflush_r>:
 80057b8:	898a      	ldrh	r2, [r1, #12]
 80057ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057be:	4605      	mov	r5, r0
 80057c0:	0710      	lsls	r0, r2, #28
 80057c2:	460c      	mov	r4, r1
 80057c4:	d458      	bmi.n	8005878 <__sflush_r+0xc0>
 80057c6:	684b      	ldr	r3, [r1, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	dc05      	bgt.n	80057d8 <__sflush_r+0x20>
 80057cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	dc02      	bgt.n	80057d8 <__sflush_r+0x20>
 80057d2:	2000      	movs	r0, #0
 80057d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057da:	2e00      	cmp	r6, #0
 80057dc:	d0f9      	beq.n	80057d2 <__sflush_r+0x1a>
 80057de:	2300      	movs	r3, #0
 80057e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057e4:	682f      	ldr	r7, [r5, #0]
 80057e6:	6a21      	ldr	r1, [r4, #32]
 80057e8:	602b      	str	r3, [r5, #0]
 80057ea:	d032      	beq.n	8005852 <__sflush_r+0x9a>
 80057ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	075a      	lsls	r2, r3, #29
 80057f2:	d505      	bpl.n	8005800 <__sflush_r+0x48>
 80057f4:	6863      	ldr	r3, [r4, #4]
 80057f6:	1ac0      	subs	r0, r0, r3
 80057f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057fa:	b10b      	cbz	r3, 8005800 <__sflush_r+0x48>
 80057fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057fe:	1ac0      	subs	r0, r0, r3
 8005800:	2300      	movs	r3, #0
 8005802:	4602      	mov	r2, r0
 8005804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005806:	6a21      	ldr	r1, [r4, #32]
 8005808:	4628      	mov	r0, r5
 800580a:	47b0      	blx	r6
 800580c:	1c43      	adds	r3, r0, #1
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	d106      	bne.n	8005820 <__sflush_r+0x68>
 8005812:	6829      	ldr	r1, [r5, #0]
 8005814:	291d      	cmp	r1, #29
 8005816:	d82b      	bhi.n	8005870 <__sflush_r+0xb8>
 8005818:	4a29      	ldr	r2, [pc, #164]	; (80058c0 <__sflush_r+0x108>)
 800581a:	410a      	asrs	r2, r1
 800581c:	07d6      	lsls	r6, r2, #31
 800581e:	d427      	bmi.n	8005870 <__sflush_r+0xb8>
 8005820:	2200      	movs	r2, #0
 8005822:	6062      	str	r2, [r4, #4]
 8005824:	04d9      	lsls	r1, r3, #19
 8005826:	6922      	ldr	r2, [r4, #16]
 8005828:	6022      	str	r2, [r4, #0]
 800582a:	d504      	bpl.n	8005836 <__sflush_r+0x7e>
 800582c:	1c42      	adds	r2, r0, #1
 800582e:	d101      	bne.n	8005834 <__sflush_r+0x7c>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	b903      	cbnz	r3, 8005836 <__sflush_r+0x7e>
 8005834:	6560      	str	r0, [r4, #84]	; 0x54
 8005836:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005838:	602f      	str	r7, [r5, #0]
 800583a:	2900      	cmp	r1, #0
 800583c:	d0c9      	beq.n	80057d2 <__sflush_r+0x1a>
 800583e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005842:	4299      	cmp	r1, r3
 8005844:	d002      	beq.n	800584c <__sflush_r+0x94>
 8005846:	4628      	mov	r0, r5
 8005848:	f7ff febe 	bl	80055c8 <_free_r>
 800584c:	2000      	movs	r0, #0
 800584e:	6360      	str	r0, [r4, #52]	; 0x34
 8005850:	e7c0      	b.n	80057d4 <__sflush_r+0x1c>
 8005852:	2301      	movs	r3, #1
 8005854:	4628      	mov	r0, r5
 8005856:	47b0      	blx	r6
 8005858:	1c41      	adds	r1, r0, #1
 800585a:	d1c8      	bne.n	80057ee <__sflush_r+0x36>
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0c5      	beq.n	80057ee <__sflush_r+0x36>
 8005862:	2b1d      	cmp	r3, #29
 8005864:	d001      	beq.n	800586a <__sflush_r+0xb2>
 8005866:	2b16      	cmp	r3, #22
 8005868:	d101      	bne.n	800586e <__sflush_r+0xb6>
 800586a:	602f      	str	r7, [r5, #0]
 800586c:	e7b1      	b.n	80057d2 <__sflush_r+0x1a>
 800586e:	89a3      	ldrh	r3, [r4, #12]
 8005870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005874:	81a3      	strh	r3, [r4, #12]
 8005876:	e7ad      	b.n	80057d4 <__sflush_r+0x1c>
 8005878:	690f      	ldr	r7, [r1, #16]
 800587a:	2f00      	cmp	r7, #0
 800587c:	d0a9      	beq.n	80057d2 <__sflush_r+0x1a>
 800587e:	0793      	lsls	r3, r2, #30
 8005880:	680e      	ldr	r6, [r1, #0]
 8005882:	bf08      	it	eq
 8005884:	694b      	ldreq	r3, [r1, #20]
 8005886:	600f      	str	r7, [r1, #0]
 8005888:	bf18      	it	ne
 800588a:	2300      	movne	r3, #0
 800588c:	eba6 0807 	sub.w	r8, r6, r7
 8005890:	608b      	str	r3, [r1, #8]
 8005892:	f1b8 0f00 	cmp.w	r8, #0
 8005896:	dd9c      	ble.n	80057d2 <__sflush_r+0x1a>
 8005898:	6a21      	ldr	r1, [r4, #32]
 800589a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800589c:	4643      	mov	r3, r8
 800589e:	463a      	mov	r2, r7
 80058a0:	4628      	mov	r0, r5
 80058a2:	47b0      	blx	r6
 80058a4:	2800      	cmp	r0, #0
 80058a6:	dc06      	bgt.n	80058b6 <__sflush_r+0xfe>
 80058a8:	89a3      	ldrh	r3, [r4, #12]
 80058aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ae:	81a3      	strh	r3, [r4, #12]
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295
 80058b4:	e78e      	b.n	80057d4 <__sflush_r+0x1c>
 80058b6:	4407      	add	r7, r0
 80058b8:	eba8 0800 	sub.w	r8, r8, r0
 80058bc:	e7e9      	b.n	8005892 <__sflush_r+0xda>
 80058be:	bf00      	nop
 80058c0:	dfbffffe 	.word	0xdfbffffe

080058c4 <_fflush_r>:
 80058c4:	b538      	push	{r3, r4, r5, lr}
 80058c6:	690b      	ldr	r3, [r1, #16]
 80058c8:	4605      	mov	r5, r0
 80058ca:	460c      	mov	r4, r1
 80058cc:	b913      	cbnz	r3, 80058d4 <_fflush_r+0x10>
 80058ce:	2500      	movs	r5, #0
 80058d0:	4628      	mov	r0, r5
 80058d2:	bd38      	pop	{r3, r4, r5, pc}
 80058d4:	b118      	cbz	r0, 80058de <_fflush_r+0x1a>
 80058d6:	6a03      	ldr	r3, [r0, #32]
 80058d8:	b90b      	cbnz	r3, 80058de <_fflush_r+0x1a>
 80058da:	f7ff fc8f 	bl	80051fc <__sinit>
 80058de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0f3      	beq.n	80058ce <_fflush_r+0xa>
 80058e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058e8:	07d0      	lsls	r0, r2, #31
 80058ea:	d404      	bmi.n	80058f6 <_fflush_r+0x32>
 80058ec:	0599      	lsls	r1, r3, #22
 80058ee:	d402      	bmi.n	80058f6 <_fflush_r+0x32>
 80058f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058f2:	f7ff fe66 	bl	80055c2 <__retarget_lock_acquire_recursive>
 80058f6:	4628      	mov	r0, r5
 80058f8:	4621      	mov	r1, r4
 80058fa:	f7ff ff5d 	bl	80057b8 <__sflush_r>
 80058fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005900:	07da      	lsls	r2, r3, #31
 8005902:	4605      	mov	r5, r0
 8005904:	d4e4      	bmi.n	80058d0 <_fflush_r+0xc>
 8005906:	89a3      	ldrh	r3, [r4, #12]
 8005908:	059b      	lsls	r3, r3, #22
 800590a:	d4e1      	bmi.n	80058d0 <_fflush_r+0xc>
 800590c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800590e:	f7ff fe59 	bl	80055c4 <__retarget_lock_release_recursive>
 8005912:	e7dd      	b.n	80058d0 <_fflush_r+0xc>

08005914 <__swhatbuf_r>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	460c      	mov	r4, r1
 8005918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800591c:	2900      	cmp	r1, #0
 800591e:	b096      	sub	sp, #88	; 0x58
 8005920:	4615      	mov	r5, r2
 8005922:	461e      	mov	r6, r3
 8005924:	da0d      	bge.n	8005942 <__swhatbuf_r+0x2e>
 8005926:	89a3      	ldrh	r3, [r4, #12]
 8005928:	f013 0f80 	tst.w	r3, #128	; 0x80
 800592c:	f04f 0100 	mov.w	r1, #0
 8005930:	bf0c      	ite	eq
 8005932:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005936:	2340      	movne	r3, #64	; 0x40
 8005938:	2000      	movs	r0, #0
 800593a:	6031      	str	r1, [r6, #0]
 800593c:	602b      	str	r3, [r5, #0]
 800593e:	b016      	add	sp, #88	; 0x58
 8005940:	bd70      	pop	{r4, r5, r6, pc}
 8005942:	466a      	mov	r2, sp
 8005944:	f000 f848 	bl	80059d8 <_fstat_r>
 8005948:	2800      	cmp	r0, #0
 800594a:	dbec      	blt.n	8005926 <__swhatbuf_r+0x12>
 800594c:	9901      	ldr	r1, [sp, #4]
 800594e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005952:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005956:	4259      	negs	r1, r3
 8005958:	4159      	adcs	r1, r3
 800595a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800595e:	e7eb      	b.n	8005938 <__swhatbuf_r+0x24>

08005960 <__smakebuf_r>:
 8005960:	898b      	ldrh	r3, [r1, #12]
 8005962:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005964:	079d      	lsls	r5, r3, #30
 8005966:	4606      	mov	r6, r0
 8005968:	460c      	mov	r4, r1
 800596a:	d507      	bpl.n	800597c <__smakebuf_r+0x1c>
 800596c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005970:	6023      	str	r3, [r4, #0]
 8005972:	6123      	str	r3, [r4, #16]
 8005974:	2301      	movs	r3, #1
 8005976:	6163      	str	r3, [r4, #20]
 8005978:	b002      	add	sp, #8
 800597a:	bd70      	pop	{r4, r5, r6, pc}
 800597c:	ab01      	add	r3, sp, #4
 800597e:	466a      	mov	r2, sp
 8005980:	f7ff ffc8 	bl	8005914 <__swhatbuf_r>
 8005984:	9900      	ldr	r1, [sp, #0]
 8005986:	4605      	mov	r5, r0
 8005988:	4630      	mov	r0, r6
 800598a:	f7ff fe89 	bl	80056a0 <_malloc_r>
 800598e:	b948      	cbnz	r0, 80059a4 <__smakebuf_r+0x44>
 8005990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005994:	059a      	lsls	r2, r3, #22
 8005996:	d4ef      	bmi.n	8005978 <__smakebuf_r+0x18>
 8005998:	f023 0303 	bic.w	r3, r3, #3
 800599c:	f043 0302 	orr.w	r3, r3, #2
 80059a0:	81a3      	strh	r3, [r4, #12]
 80059a2:	e7e3      	b.n	800596c <__smakebuf_r+0xc>
 80059a4:	89a3      	ldrh	r3, [r4, #12]
 80059a6:	6020      	str	r0, [r4, #0]
 80059a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ac:	81a3      	strh	r3, [r4, #12]
 80059ae:	9b00      	ldr	r3, [sp, #0]
 80059b0:	6163      	str	r3, [r4, #20]
 80059b2:	9b01      	ldr	r3, [sp, #4]
 80059b4:	6120      	str	r0, [r4, #16]
 80059b6:	b15b      	cbz	r3, 80059d0 <__smakebuf_r+0x70>
 80059b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059bc:	4630      	mov	r0, r6
 80059be:	f000 f81d 	bl	80059fc <_isatty_r>
 80059c2:	b128      	cbz	r0, 80059d0 <__smakebuf_r+0x70>
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	f043 0301 	orr.w	r3, r3, #1
 80059ce:	81a3      	strh	r3, [r4, #12]
 80059d0:	89a3      	ldrh	r3, [r4, #12]
 80059d2:	431d      	orrs	r5, r3
 80059d4:	81a5      	strh	r5, [r4, #12]
 80059d6:	e7cf      	b.n	8005978 <__smakebuf_r+0x18>

080059d8 <_fstat_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	4d07      	ldr	r5, [pc, #28]	; (80059f8 <_fstat_r+0x20>)
 80059dc:	2300      	movs	r3, #0
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	4611      	mov	r1, r2
 80059e4:	602b      	str	r3, [r5, #0]
 80059e6:	f7fb fc50 	bl	800128a <_fstat>
 80059ea:	1c43      	adds	r3, r0, #1
 80059ec:	d102      	bne.n	80059f4 <_fstat_r+0x1c>
 80059ee:	682b      	ldr	r3, [r5, #0]
 80059f0:	b103      	cbz	r3, 80059f4 <_fstat_r+0x1c>
 80059f2:	6023      	str	r3, [r4, #0]
 80059f4:	bd38      	pop	{r3, r4, r5, pc}
 80059f6:	bf00      	nop
 80059f8:	20004250 	.word	0x20004250

080059fc <_isatty_r>:
 80059fc:	b538      	push	{r3, r4, r5, lr}
 80059fe:	4d06      	ldr	r5, [pc, #24]	; (8005a18 <_isatty_r+0x1c>)
 8005a00:	2300      	movs	r3, #0
 8005a02:	4604      	mov	r4, r0
 8005a04:	4608      	mov	r0, r1
 8005a06:	602b      	str	r3, [r5, #0]
 8005a08:	f7fb fc4f 	bl	80012aa <_isatty>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d102      	bne.n	8005a16 <_isatty_r+0x1a>
 8005a10:	682b      	ldr	r3, [r5, #0]
 8005a12:	b103      	cbz	r3, 8005a16 <_isatty_r+0x1a>
 8005a14:	6023      	str	r3, [r4, #0]
 8005a16:	bd38      	pop	{r3, r4, r5, pc}
 8005a18:	20004250 	.word	0x20004250

08005a1c <_sbrk_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	4d06      	ldr	r5, [pc, #24]	; (8005a38 <_sbrk_r+0x1c>)
 8005a20:	2300      	movs	r3, #0
 8005a22:	4604      	mov	r4, r0
 8005a24:	4608      	mov	r0, r1
 8005a26:	602b      	str	r3, [r5, #0]
 8005a28:	f7fb fc58 	bl	80012dc <_sbrk>
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	d102      	bne.n	8005a36 <_sbrk_r+0x1a>
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	b103      	cbz	r3, 8005a36 <_sbrk_r+0x1a>
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	bd38      	pop	{r3, r4, r5, pc}
 8005a38:	20004250 	.word	0x20004250

08005a3c <_init>:
 8005a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3e:	bf00      	nop
 8005a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a42:	bc08      	pop	{r3}
 8005a44:	469e      	mov	lr, r3
 8005a46:	4770      	bx	lr

08005a48 <_fini>:
 8005a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4a:	bf00      	nop
 8005a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a4e:	bc08      	pop	{r3}
 8005a50:	469e      	mov	lr, r3
 8005a52:	4770      	bx	lr
